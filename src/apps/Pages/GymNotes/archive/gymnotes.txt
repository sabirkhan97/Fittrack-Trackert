import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import { motion } from 'framer-motion';
import { DatePicker, Select } from 'antd';
import dayjs from 'dayjs';
import type { Dayjs } from 'dayjs';
import { useTheme } from "../../../context/theme-provider";
import type { DefaultOptionType } from 'antd/es/select';

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Icons } from '@/components/icons';
import exercises from '@/apps/Pages/GymNotes/Data/exercises.json';

const { Option } = Select;

const exerciseSchema = z.object({
  exercise_name: z.string().min(1, {
    message: 'Exercise name is required.',
  }),
  sets: z.number().min(1, {
    message: 'Sets must be at least 1.',
  }),
  reps: z.number().min(1, {
    message: 'Reps must be at least 1.',
  }),
  weight: z.number().min(0).optional(),
  set_type: z.enum(['Superset', 'Dropset', 'Alternate']).optional(),
  additional_exercises: z.array(z.string()).optional(),
});

const formSchema = z.object({
  exercise_date: z.date({
    required_error: 'A date is required.',
  }),
  workout_type: z.enum(['Upper Body', 'Lower Body', 'Full Body', 'Bro Split (Single Muscle)'], {
    required_error: 'Workout type is required.',
  }),
  muscle_group: z.string().optional(),
  exercises: z.array(exerciseSchema).min(1, {
    message: 'At least one exercise is required.',
  }),
});

type FormValues = z.infer<typeof formSchema>;

export default function GymNotes() {
  const [exercisesList, setExercisesList] = useState<string[]>([]);
  const [muscleGroups, setMuscleGroups] = useState<string[]>([]);
  const [alternateExercises, setAlternateExercises] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState('Gym Notes');

  const [typedExercise, setTypedExercise] = useState("");

  const navigate = useNavigate();


  const { theme } = useTheme();
  const isDarkMode =
    theme === "dark" ||
    (theme === "system" && window.matchMedia("(prefers-color-scheme: dark)").matches);

  useEffect(() => {
    if (isDarkMode) {
      const styleTag = document.createElement("style");
      styleTag.id = "dark-mode-placeholder-style";
      styleTag.innerHTML = `
          .ant-picker-input input::placeholder {
            color: #888888 !important;
            opacity: 1 !important;
          }
        `;
      document.head.appendChild(styleTag);
      return () => {
        document.head.removeChild(styleTag);
      };
    } else {
      const existing = document.getElementById("dark-mode-placeholder-style");
      if (existing) existing.remove();
    }
  }, [isDarkMode]);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      exercise_date: new Date(),
      workout_type: undefined,
      muscle_group: undefined,
      exercises: [
        {
          exercise_name: '',
          sets: 1,
          reps: 1,
          weight: undefined,
          set_type: undefined,
          additional_exercises: [],
        },
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'exercises',
  });

  const workoutType = form.watch('workout_type');
  const muscleGroup = form.watch('muscle_group');

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('Please login');
      navigate('/login');
      return;
    }

    const fetchProfile = async () => {
      try {
        const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/profile`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const fetchedUsername = response.data.user.username;
        if (fetchedUsername && typeof fetchedUsername === 'string') {
          setUsername(fetchedUsername);
        }
      } catch (error: any) {
        console.error('Fetch profile error in GymNotes:', error.response?.data || error.message);
        if (error.response?.status === 401) {
          localStorage.removeItem('token');
          toast.error('Session expired. Please login again.');
          navigate('/login');
        }
      }
    };

    fetchProfile();
    fetchExercises();

    const broSplit = exercises['Bro Split (Single Muscle)'];
    const alternateList = [
      ...(broSplit?.Shoulders || []),
      ...(broSplit?.Legs || []),
      ...(broSplit?.Arms || []),
    ];
    setAlternateExercises([...new Set(alternateList)]);
  }, [navigate]);

  useEffect(() => {
    if (workoutType === 'Bro Split (Single Muscle)') {
      setMuscleGroups(Object.keys(exercises['Bro Split (Single Muscle)']));
      setExercisesList([]);
      form.setValue('muscle_group', '');
      resetExerciseFields();
    } else if (workoutType) {
      setMuscleGroups([]);
      const list = exercises[workoutType as keyof typeof exercises];
      if (Array.isArray(list)) {
        setExercisesList(list);
      } else {
        setExercisesList([]);
      }
      form.setValue('muscle_group', undefined);
      resetExerciseFields();
    } else {
      setExercisesList([]);
      setMuscleGroups([]);
      form.setValue('muscle_group', undefined);
      resetExerciseFields();
    }
  }, [workoutType]);

  useEffect(() => {
    if (workoutType === 'Bro Split (Single Muscle)' && muscleGroup) {
      const muscleExercises =
        exercises['Bro Split (Single Muscle)'][muscleGroup as keyof typeof exercises['Bro Split (Single Muscle)']] || [];
      setExercisesList(muscleExercises);
      resetExerciseFields();
    }
  }, [muscleGroup]);

  const resetExerciseFields = () => {
    form.setValue('exercises', [
      {
        exercise_name: '',
        sets: 1,
        reps: 1,
        weight: undefined,
        set_type: undefined,
        additional_exercises: [],
      },
    ]);
  };

  const fetchExercises = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        toast.error('Please login');
        navigate('/login');
        return;
      }
      console.log('Fetching exercises from:', `${import.meta.env.VITE_API_URL}/exercises`);
      // const response = await axios.get(`${import.meta.env.VITE_API_URL}/exercises`, {
      //   headers: { Authorization: `Bearer ${token}` },
      // });
      // setSavedExercises(response.data);
    } catch (error: any) {
      console.error('Error fetching exercises:', error);
      if (error.code === 'ERR_NETWORK') {
        toast.error('Cannot connect to the backend. Please ensure the server is running on http://localhost:5000.');
      } else if (error.response?.status === 401) {
        toast.error('Session expired. Please login again.');
        navigate('/login');
      } else {
        toast.error('Failed to fetch exercises: ' + (error.message || 'Unknown error'));
      }
    }
  };

  async function onSubmit(values: FormValues) {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        toast.error('Authentication required');
        return;
      }

      const formattedDate = dayjs(values.exercise_date).format('YYYY-MM-DD');
      console.log('Submitting date:', formattedDate);

      const requests = values.exercises.map((exercise) => {
        return axios.post(
          `${import.meta.env.VITE_API_URL}/exercises`,
          {
            exercise_name: exercise.exercise_name,
            sets: exercise.sets,
            reps: exercise.reps,
            weight: exercise.weight,
            exercise_date: formattedDate,
            workout_type: values.workout_type,
            muscle_group: values.muscle_group,
            set_type: exercise.set_type,
            additional_exercises: exercise.additional_exercises || [],
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      });

      await Promise.all(requests);
      toast.success('Exercises added successfully!');
      form.reset({
        exercise_date: values.exercise_date,
        workout_type: undefined,
        muscle_group: undefined,
        exercises: [
          {
            exercise_name: '',
            sets: 1,
            reps: 1,
            weight: undefined,
            set_type: undefined,
            additional_exercises: [],
          },
        ],
      });
      fetchExercises();
    } catch (error) {
      console.error('Error adding exercises:', error);
      toast.error('Failed to add exercises');
    } finally {
      setLoading(false);
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('token');
    setUsername('Gym Notes');
    navigate('/login');
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-primary">
            Welcome back, <span className="text-accent">{username}</span>!
          </h1>

          <Button variant="outline" onClick={handleLogout}>
            <Icons.logout className="mr-2 h-4 w-4" />
            Logout
          </Button>
        </div>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-xl">Add New Workout</CardTitle>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="exercise_date"
                    render={({ field }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel>Date</FormLabel>
                        <FormControl>
                          <DatePicker
                            className={`w-full dark:bg-background dark:text-foreground ${isDarkMode ? "bg-[#212121] text-[#fbfbfb]" : ""}`}
                            format="YYYY-MM-DD"
                            style={{
                              backgroundColor: isDarkMode ? "transparent" : undefined,
                              color: isDarkMode ? "#fbfbfb" : undefined,
                              borderBottomColor: isDarkMode ? "#ffffff26" : undefined,
                              borderLeftColor: isDarkMode ? "#ffffff26" : undefined,
                              borderRightColor: isDarkMode ? "#ffffff26" : undefined,
                              borderTopColor: isDarkMode ? "#ffffff26" : undefined,
                            }}
                            value={field.value ? dayjs(field.value) : undefined}
                            onChange={(date: Dayjs | null) => {
                              const newDate = date ? date.toDate() : new Date();
                              field.onChange(newDate);
                            }}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="workout_type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Workout Type</FormLabel>
                        <FormControl>
                          <Select
                            showSearch
                            placeholder="Select workout type"
                            optionFilterProp="children"
                            onChange={field.onChange}
                            value={field.value}
                            filterOption={(input, option) =>
                              (option?.children as string).toLowerCase().includes(input.toLowerCase())
                            }
                            className={`w-full dark:bg-background dark:text-foreground ${isDarkMode ? 'bg-[#212121] text-[#fbfbfb]' : ''}`}
                            style={{
                              backgroundColor: isDarkMode ? 'transparent' : undefined,
                              color: isDarkMode ? '#fbfbfb' : undefined,
                              borderBottomColor: isDarkMode ? '#ffffff26' : undefined,
                              borderLeftColor: isDarkMode ? '#ffffff26' : undefined,
                              borderRightColor: isDarkMode ? '#ffffff26' : undefined,
                              borderTopColor: isDarkMode ? '#ffffff26' : undefined,
                            }}
                          >
                            {['Upper Body', 'Lower Body', 'Full Body', 'Bro Split (Single Muscle)'].map((type) => (
                              <Option key={type} value={type}>
                                {type}
                              </Option>
                            ))}
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {workoutType === 'Bro Split (Single Muscle)' && (
                    <FormField
                      control={form.control}
                      name="muscle_group"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Muscle Group</FormLabel>
                          <FormControl>
                            <Select
                              showSearch
                              placeholder="Select muscle group"
                              optionFilterProp="children"
                              onChange={field.onChange}
                              value={field.value}
                              filterOption={(input, option) =>
                                (option?.children as string).toLowerCase().includes(input.toLowerCase())
                              }
                              style={{ width: '100%' }}
                            >
                              {muscleGroups.map((group) => (
                                <Option key={group} value={group}>{group}</Option>
                              ))}
                            </Select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  )}
                </div>

                {fields.map((field, index) => (
                  <Card key={field.id} className="mt-4">
                    <CardHeader className="flex flex-row items-center justify-between">
                      <CardTitle className="text-lg">Exercise {index + 1}</CardTitle>
                      {fields.length > 1 && (
                        <Button variant="ghost" size="icon" onClick={() => remove(index)}>
                          <Icons.trash className="h-4 w-4" />
                        </Button>
                      )}
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                        <FormField
                          control={form.control}
                          name={`exercises.${index}.exercise_name`}
                          render={({ field }) => {
                            const customOptionNotExist =
                              typedExercise &&
                              !exercisesList.some(
                                (e) => e.toLowerCase() === typedExercise.toLowerCase()
                              );

                            return (
                              <FormItem>
                                <FormLabel>Exercise Name</FormLabel>
                                <FormControl>
                                  <Select
                                    showSearch
                                    options={[
                                      ...exercisesList.map((exercise) => ({ label: exercise, value: exercise })),
                                      ...(customOptionNotExist ? [{ label: ` ${typedExercise}`, value: typedExercise }] : []),
                                    ]}
                                    placeholder="Select or type exercise"
                                    value={field.value}
                                    onChange={(val) => {
                                      setTypedExercise('');
                                      field.onChange(val);
                                    }}
                                    onSearch={(val) => setTypedExercise(val)}
                                    filterOption={(input, option) => {
                                      if (!option || typeof option.label !== 'string') return false;
                                      return option.label.toLowerCase().includes(input.toLowerCase());
                                    }}

                                  />

                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            );
                          }}
                        />


                        <div className="flex gap-2 justify-between">
                          <FormField
                            control={form.control}
                            name={`exercises.${index}.sets`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel htmlFor={`sets-${index}`}>Sets</FormLabel>
                                <FormControl>
                                  <Input
                                    id={`sets-${index}`}
                                    type="number"
                                    inputMode="numeric"
                                    min={1}
                                    step={1}
                                    placeholder="e.g., 3"
                                    {...field}
                                    onChange={(e) => {
                                      const value = e.target.value;
                                      const numeric = value === '' ? '' : Math.max(1, parseInt(value));
                                      field.onChange(numeric);
                                    }}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name={`exercises.${index}.reps`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Reps</FormLabel>
                                <FormControl>
                                  <Input
                                    type="number"
                                    min={1}
                                    placeholder="e.g., 10"
                                    {...field}
                                    onChange={(e) => {
                                      const val = e.target.value;
                                      field.onChange(val === '' ? undefined : Number(val));
                                    }}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                        </div>
                        <FormField
                          control={form.control}
                          name={`exercises.${index}.weight`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Weight (kg)</FormLabel>
                              <FormControl>
                                <Input
                                  type="number"
                                  min={0}
                                  placeholder="e.g., 50"
                                  {...field}
                                  onChange={(e) => field.onChange(Number(e.target.value))}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={form.control}
                          name={`exercises.${index}.set_type`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Set Type (Optional)</FormLabel>
                              <FormControl>
                                <Select
                                  placeholder="Select set type"
                                  onChange={(value) => {
                                    field.onChange(value);
                                    if (value !== 'Superset' && value !== 'Alternate') {
                                      form.setValue(`exercises.${index}.additional_exercises`, []);
                                    }
                                  }}
                                  value={field.value}
                                  style={{ width: '100%' }}
                                  allowClear
                                >
                                  <Option value="Superset">Superset</Option>
                                  <Option value="Dropset">Dropset</Option>
                                  <Option value="Alternate">Alternate</Option>
                                </Select>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        {(form.watch(`exercises.${index}.set_type`) === 'Superset' ||
                          form.watch(`exercises.${index}.set_type`) === 'Alternate') && (
                            <FormField
                              control={form.control}
                              name={`exercises.${index}.additional_exercises`}
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Additional Exercises (Optional)</FormLabel>
                                  <FormControl>
                                    <Select
                                      mode="multiple"
                                      placeholder="Select additional exercises"
                                      onChange={field.onChange}
                                      value={field.value}
                                      disabled={!workoutType || (workoutType === 'Bro Split (Single Muscle)' && !muscleGroup)}
                                      style={{ width: '100%' }}
                                      allowClear
                                    >
                                      {(form.watch(`exercises.${index}.set_type`) === 'Alternate'
                                        ? alternateExercises
                                        : exercisesList
                                      )
                                        .filter((ex) => ex !== form.getValues(`exercises.${index}.exercise_name`))
                                        .map((exercise) => (
                                          <Option key={exercise} value={exercise}>
                                            {exercise}
                                          </Option>
                                        ))}
                                    </Select>
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
                <div className="flex gap-1.5">
                  <Button
                    type="button"
                    variant="outline"
                    size="icon"
                    className="mt-4"
                    onClick={() =>
                      append({
                        exercise_name: '',
                        sets: 1,
                        reps: 1,
                        weight: undefined,
                        set_type: undefined,
                        additional_exercises: [],
                      })
                    }
                  >
                    <Icons.plus className="h-4 w-4" />
                  </Button>
                  <Button type="submit" disabled={loading} className="mt-4">
                    {loading && <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />}
                    Add Workout
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}



















import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';
import { DatePicker, Select } from 'antd';
import dayjs from 'dayjs';
import type { Dayjs } from 'dayjs';
import { useTheme } from "../../../context/theme-provider";

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Icons } from '@/components/icons';
import exercises from '@/apps/Pages/GymNotes/Data/exercises.json';

const { Option } = Select;

// Enhanced schema with better validation messages
const exerciseSchema = z.object({
  exercise_name: z.string().min(1, { message: 'Please select an exercise' }),
  sets: z.number().min(1, { message: 'Minimum 1 set' }).max(20, { message: 'Maximum 20 sets' }),
  reps: z.number().min(1, { message: 'Minimum 1 rep' }).max(100, { message: 'Maximum 100 reps' }),
  weight: z.number().min(0, { message: 'Must be positive' }).max(500, { message: 'Maximum 500kg' }).optional(),
  set_type: z.enum(['Superset', 'Dropset', 'Alternate', 'Circuit']).optional(),
  additional_exercises: z.array(z.string()).optional(),
  notes: z.string().max(200, { message: 'Maximum 200 characters' }).optional(),
});

const formSchema = z.object({
  exercise_date: z.date({ required_error: 'Workout date is required' }),
  workout_type: z.enum(['Upper Body', 'Lower Body', 'Full Body', 'Bro Split (Single Muscle)'], {
    required_error: 'Please select a workout type',
  }),
  muscle_group: z.string().optional(),
  exercises: z.array(exerciseSchema).min(1, { message: 'Add at least one exercise' }),
});

type FormValues = z.infer<typeof formSchema>;

export default function GymNotes() {
  const [exercisesList, setExercisesList] = useState<string[]>([]);
  const [muscleGroups, setMuscleGroups] = useState<string[]>([]);
  const [alternateExercises, setAlternateExercises] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState('');
  const [typedExercise, setTypedExercise] = useState("");
  const navigate = useNavigate();
  const { theme } = useTheme();
  const isDarkMode = theme === "dark" || (theme === "system" && window.matchMedia("(prefers-color-scheme: dark)").matches);

  // Custom styles for Ant Design components
  const selectStyles = {
    backgroundColor: isDarkMode ? '#1a1a1a' : '#fff',
    color: isDarkMode ? '#f5f5f5' : '#111',
    borderColor: isDarkMode ? '#333' : '#d9d9d9',
  };

  const dropdownStyles = {
    backgroundColor: isDarkMode ? '#1a1a1a' : '#fff',
    color: isDarkMode ? '#f5f5f5' : '#111',
  };

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      exercise_date: new Date(),
      workout_type: undefined,
      muscle_group: undefined,
      exercises: [{
        exercise_name: '',
        sets: 3,
        reps: 10,
        weight: undefined,
        set_type: undefined,
        additional_exercises: [],
        notes: '',
      }],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'exercises',
  });

  const workoutType = form.watch('workout_type');
  const muscleGroup = form.watch('muscle_group');

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('Please login to track workouts');
      navigate('/login');
      return;
    }

    const fetchProfile = async () => {
      try {
        const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/profile`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const fetchedUsername = response.data.user.username;
        if (fetchedUsername) {
          setUsername(fetchedUsername.charAt(0).toUpperCase() + fetchedUsername.slice(1));
        }
      } catch (error) {
        console.error('Profile fetch error:', error);
      }
    };

    fetchProfile();

    // Initialize exercises
    const broSplit = exercises['Bro Split (Single Muscle)'];
    const alternateList = [
      ...(broSplit?.Shoulders || []),
      ...(broSplit?.Legs || []),
      ...(broSplit?.Arms || []),
    ];
    setAlternateExercises([...new Set(alternateList)]);
  }, [navigate]);

  // Update available exercises when workout type changes
  useEffect(() => {
    if (workoutType === 'Bro Split (Single Muscle)') {
      setMuscleGroups(Object.keys(exercises['Bro Split (Single Muscle)']));
      setExercisesList([]);
      form.setValue('muscle_group', '');
    } else if (workoutType) {
      setMuscleGroups([]);
      const list = exercises[workoutType as keyof typeof exercises];
      setExercisesList(Array.isArray(list) ? list : []);
      form.setValue('muscle_group', undefined);
    } else {
      setExercisesList([]);
      setMuscleGroups([]);
      form.setValue('muscle_group', undefined);
    }
    resetExerciseFields();
  }, [workoutType]);

  // Update exercises when muscle group changes (for Bro Split)
  useEffect(() => {
    if (workoutType === 'Bro Split (Single Muscle)' && muscleGroup) {
      const muscleExercises = exercises['Bro Split (Single Muscle)'][muscleGroup as keyof typeof exercises['Bro Split (Single Muscle)']] || [];
      setExercisesList(muscleExercises);
      resetExerciseFields();
    }
  }, [muscleGroup]);

  const resetExerciseFields = () => {
    form.setValue('exercises', [{
      exercise_name: '',
      sets: 3,
      reps: 10,
      weight: undefined,
      set_type: undefined,
      additional_exercises: [],
      notes: '',
    }]);
  };

  async function onSubmit(values: FormValues) {
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        toast.error('Session expired. Please login again.');
        navigate('/login');
        return;
      }

      const formattedDate = dayjs(values.exercise_date).format('YYYY-MM-DD');
      const requests = values.exercises.map(exercise => 
        axios.post(`${import.meta.env.VITE_API_URL}/exercises`, {
          exercise_name: exercise.exercise_name,
          sets: exercise.sets,
          reps: exercise.reps,
          weight: exercise.weight,
          exercise_date: formattedDate,
          workout_type: values.workout_type,
          muscle_group: values.muscle_group,
          set_type: exercise.set_type,
          additional_exercises: exercise.additional_exercises || [],
          notes: exercise.notes || '',
        }, { headers: { Authorization: `Bearer ${token}` } })
      );

      await Promise.all(requests);
      toast.success('Workout saved successfully!', {
        description: 'Your progress has been recorded',
        action: {
          label: 'View Progress',
          onClick: () => navigate('/workout-summary'),
        },
      });
      
      // Reset form but keep the date
      form.reset({
        exercise_date: values.exercise_date,
        workout_type: undefined,
        muscle_group: undefined,
        exercises: [{
          exercise_name: '',
          sets: 3,
          reps: 10,
          weight: undefined,
          set_type: undefined,
          additional_exercises: [],
          notes: '',
        }],
      });
    } catch (error:any) {
      console.error('Error saving workout:', error);
      toast.error('Failed to save workout', {
        description: error.response?.data?.error || 'Please try again',
      });
    } finally {
      setLoading(false);
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        {/* Header Section */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent">
              {username ? `Welcome, ${username}` : 'Workout Tracker'}
            </h1>
            <p className="text-muted-foreground">Track your gym progress like a pro</p>
          </div>
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={() => navigate('/workout-summary')}
              className="border-primary/30 hover:bg-primary/5"
            >
              <Icons.barChart className="mr-2 h-4 w-4" />
              View Progress
            </Button>
            <Button 
              variant="outline" 
              onClick={handleLogout}
              className="border-destructive/30 hover:bg-destructive/5 hover:text-destructive"
            >
              <Icons.logout className="mr-2 h-4 w-4" />
              Sign Out
            </Button>
          </div>
        </div>

        {/* Main Form Card */}
        <Card className="border-0 shadow-xl">
          <CardHeader className="border-b">
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl font-semibold">New Workout Session</CardTitle>
                <CardDescription>Record your exercises and track your progress</CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => append({
                    exercise_name: '',
                    sets: 3,
                    reps: 10,
                    weight: undefined,
                    set_type: undefined,
                    additional_exercises: [],
                    notes: '',
                  })}
                >
                  <Icons.plus className="mr-2 h-4 w-4" />
                  Add Exercise
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-6">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                {/* Workout Details Section */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="exercise_date"
                    render={({ field }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel className="flex items-center gap-2">
                          <Icons.calendar className="h-4 w-4 text-muted-foreground" />
                          Workout Date
                        </FormLabel>
                        <FormControl>
                          <DatePicker
                            className="w-full"
                            format="YYYY-MM-DD"
                            style={selectStyles}
                            popupStyle={dropdownStyles}
                            value={field.value ? dayjs(field.value) : undefined}
                            onChange={(date: Dayjs | null) => field.onChange(date ? date.toDate() : new Date())}
                            allowClear={false}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="workout_type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <Icons.activity className="h-4 w-4 text-muted-foreground" />
                          Workout Type
                        </FormLabel>
                        <FormControl>
                          <Select
                            showSearch
                            placeholder="Select type"
                            optionFilterProp="children"
                            onChange={field.onChange}
                            value={field.value}
                            filterOption={(input, option) =>
                              (option?.children as string).toLowerCase().includes(input.toLowerCase())
                            }
                            style={selectStyles}
                            dropdownStyle={dropdownStyles}
                          >
                            {['Upper Body', 'Lower Body', 'Full Body', 'Bro Split (Single Muscle)'].map((type) => (
                              <Option key={type} value={type} className="hover:bg-accent">
                                {type}
                              </Option>
                            ))}
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {workoutType === 'Bro Split (Single Muscle)' && (
                    <FormField
                      control={form.control}
                      name="muscle_group"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="flex items-center gap-2">
                            <Icons.muscle className="h-4 w-4 text-muted-foreground" />
                            Target Muscle
                          </FormLabel>
                          <FormControl>
                            <Select
                              showSearch
                              placeholder="Select muscle"
                              optionFilterProp="children"
                              onChange={field.onChange}
                              value={field.value}
                              filterOption={(input, option) =>
                                (option?.children as string).toLowerCase().includes(input.toLowerCase())
                              }
                              style={selectStyles}
                              dropdownStyle={dropdownStyles}
                            >
                              {muscleGroups.map((group) => (
                                <Option key={group} value={group} className="hover:bg-accent">
                                  {group}
                                </Option>
                              ))}
                            </Select>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  )}
                </div>

                {/* Exercises Section */}
                <div className="space-y-4">
                  <AnimatePresence>
                    {fields.map((field, index) => (
                      <motion.div
                        key={field.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, x: -10 }}
                        transition={{ duration: 0.2 }}
                      >
                        <Card className="border-0 shadow-sm">
                          <CardHeader className="flex flex-row items-center justify-between border-b p-4">
                            <div className="flex items-center gap-2">
                              <Icons.dumbbell />
                              <CardTitle className="text-lg font-medium">
                                Exercise {index + 1}
                              </CardTitle>
                            </div>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => remove(index)}
                              className="text-destructive hover:text-destructive"
                            >
                              <Icons.trash className="h-4 w-4" />
                            </Button>
                          </CardHeader>
                          <CardContent className="p-4 space-y-4">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              {/* Exercise Name */}
                              <FormField
                                control={form.control}
                                name={`exercises.${index}.exercise_name`}
                                render={({ field }) => {
                                  const customOptionNotExist =
                                    typedExercise &&
                                    !exercisesList.some(
                                      (e) => e.toLowerCase() === typedExercise.toLowerCase()
                                    );

                                  return (
                                    <FormItem>
                                      <FormLabel>Exercise Name</FormLabel>
                                      <FormControl>
                                        <Select
                                          showSearch
                                          placeholder="Search or type exercise"
                                          optionFilterProp="children"
                                          onChange={(value) => {
                                            setTypedExercise('');
                                            field.onChange(value);
                                          }}
                                          onSearch={setTypedExercise}
                                          value={field.value}
                                          filterOption={(input, option) => {
                                            if (!option || typeof option.label !== 'string') return false;
                                            return option.label.toLowerCase().includes(input.toLowerCase());
                                          }}
                                          options={[
                                            ...exercisesList.map(ex => ({ label: ex, value: ex })),
                                            ...(customOptionNotExist ? [{ label: typedExercise, value: typedExercise }] : []),
                                          ]}
                                          style={selectStyles}
                                          dropdownStyle={dropdownStyles}
                                          notFoundContent={
                                            <div className="p-2 text-muted-foreground">
                                              No exercises found
                                            </div>
                                          }
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  );
                                }}
                              />

                              {/* Sets & Reps */}
                              <div className="flex gap-4">
                                <FormField
                                  control={form.control}
                                  name={`exercises.${index}.sets`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormLabel>Sets</FormLabel>
                                      <FormControl>
                                        <Input
                                          type="number"
                                          min={1}
                                          max={20}
                                          placeholder="3"
                                          value={field.value}
                                          onChange={(e) => {
                                            const val = parseInt(e.target.value);
                                            field.onChange(isNaN(val) ? 0 : val);
                                          }}
                                          className="[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                                <FormField
                                  control={form.control}
                                  name={`exercises.${index}.reps`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormLabel>Reps</FormLabel>
                                      <FormControl>
                                        <Input
                                          type="number"
                                          min={1}
                                          max={100}
                                          placeholder="10"
                                          value={field.value}
                                          onChange={(e) => {
                                            const val = parseInt(e.target.value);
                                            field.onChange(isNaN(val) ? 0 : val);
                                          }}
                                          className="[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>

                              {/* Weight */}
                              <FormField
                                control={form.control}
                                name={`exercises.${index}.weight`}
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Weight (kg)</FormLabel>
                                    <FormControl>
                                      <Input
                                        type="number"
                                        min={0}
                                        max={500}
                                        placeholder="50"
                                        value={field.value || ''}
                                        onChange={(e) => {
                                          const val = parseFloat(e.target.value);
                                          field.onChange(isNaN(val) ? undefined : val);
                                        }}
                                        className="[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                                      />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />

                              {/* Set Type */}
                              <FormField
                                control={form.control}
                                name={`exercises.${index}.set_type`}
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Set Type</FormLabel>
                                    <FormControl>
                                      <Select
                                        placeholder="Select type"
                                        onChange={(value) => {
                                          field.onChange(value);
                                          if (value !== 'Superset' && value !== 'Alternate') {
                                            form.setValue(`exercises.${index}.additional_exercises`, []);
                                          }
                                        }}
                                        value={field.value}
                                        style={selectStyles}
                                        dropdownStyle={dropdownStyles}
                                        allowClear
                                      >
                                        <Option value="Superset">Superset</Option>
                                        <Option value="Dropset">Dropset</Option>
                                        <Option value="Alternate">Alternate</Option>
                                        <Option value="Circuit">Circuit</Option>
                                      </Select>
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                            </div>

                            {/* Additional Exercises */}
                            {(form.watch(`exercises.${index}.set_type`) === 'Superset' ||
                              form.watch(`exercises.${index}.set_type`) === 'Alternate') && (
                              <FormField
                                control={form.control}
                                name={`exercises.${index}.additional_exercises`}
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>
                                      {form.watch(`exercises.${index}.set_type`) === 'Superset' 
                                        ? 'Superset With' 
                                        : 'Alternate With'}
                                    </FormLabel>
                                    <FormControl>
                                      <Select
                                        mode="multiple"
                                        placeholder={
                                          form.watch(`exercises.${index}.set_type`) === 'Superset' 
                                            ? 'Select superset exercises' 
                                            : 'Select alternate exercises'
                                        }
                                        onChange={field.onChange}
                                        value={field.value}
                                        disabled={!workoutType || (workoutType === 'Bro Split (Single Muscle)' && !muscleGroup)}
                                        style={selectStyles}
                                        dropdownStyle={dropdownStyles}
                                        maxTagCount="responsive"
                                      >
                                        {(form.watch(`exercises.${index}.set_type`) === 'Alternate'
                                          ? alternateExercises
                                          : exercisesList
                                        )
                                          .filter((ex) => ex !== form.getValues(`exercises.${index}.exercise_name`))
                                          .map((exercise) => (
                                            <Option key={exercise} value={exercise} className="hover:bg-accent">
                                              {exercise}
                                            </Option>
                                          ))}
                                      </Select>
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                            )}

                            {/* Notes */}
                            <FormField
                              control={form.control}
                              name={`exercises.${index}.notes`}
                              render={({ field }) => (
                                <FormItem className="md:col-span-2">
                                  <FormLabel>Notes</FormLabel>
                                  <FormControl>
                                    <Input
                                      placeholder="Any notes about this exercise (optional)"
                                      {...field}
                                      value={field.value || ''}
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>

                {/* Form Actions */}
                <div className="flex justify-end gap-2 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => navigate('/workout-summary')}
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit" 
                    disabled={loading}
                    className="bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90"
                  >
                    {loading ? (
                      <>
                        <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      <>
                        <Icons.save className="mr-2 h-4 w-4" />
                        Save Workout
                      </>
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}