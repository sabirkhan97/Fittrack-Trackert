"use client"

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'sonner';
import { Icons } from '@/components/icons';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { format } from 'date-fns';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';

interface Exercise {
  exercise_name: string;
  sets: number;
  reps: number;
  weight: number;
  rest: string;
  notes?: string;
}

interface WorkoutPlan {
  id: string;
  date: string;
  exercises: Exercise[];
  notes?: string;
  prompt?: string;
  duration?: number;
  bodyMetrics?: {
    age?: number;
    sex?: string;
    height?: string;
    weight?: string;
    bodyFat?: string;
    muscleMass?: string;
  };
  fitnessProfile?: {
    experienceLevel?: string;
    primaryGoal?: string;
    secondaryGoals?: string[];
    targetAreas?: string[];
    avoidAreas?: string[];
    injuries?: string[];
  };
  equipment?: {
    available?: string[];
    homeGym?: boolean;
    resistanceBands?: boolean;
    dumbbells?: boolean;
    barbell?: boolean;
    kettlebells?: boolean;
    pullUpBar?: boolean;
    cardioMachine?: boolean;
  };
  preferences?: {
    workoutTime?: string;
    daysPerWeek?: number;
    intensity?: string;
    favoriteExercises?: string[];
    dislikedExercises?: string[];
  };
}

const WorkoutGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [workoutPlan, setWorkoutPlan] = useState<WorkoutPlan | null>(null);
  const [savedPlans, setSavedPlans] = useState<WorkoutPlan[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('generate');
  const [countdown, setCountdown] = useState(180);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({
    // Body Metrics
    age: '',
    sex: '',
    height: '',
    weight: '',
    bodyFat: '',
    muscleMass: '',
    
    // Fitness Profile
    experienceLevel: '',
    primaryGoal: '',
    secondaryGoals: [] as string[],
    targetAreas: [] as string[],
    avoidAreas: [] as string[],
    injuries: [] as string[],
    
    // Equipment
    availableEquipment: [] as string[],
    homeGym: false,
    resistanceBands: false,
    dumbbells: false,
    barbell: false,
    kettlebells: false,
    pullUpBar: false,
    cardioMachine: false,
    
    // Preferences
    workoutTime: '',
    daysPerWeek: '',
    intensity: '',
    favoriteExercises: '',
    dislikedExercises: '',
  });

  const token = localStorage.getItem('token');

  const fetchSavedPlans = async () => {
    try {
      const res = await axios.get('/api/workout-plans/my', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSavedPlans(res.data.plans);
    } catch (error: any) {
      console.error('Fetch Saved Plans Error:', error);
      toast.error(error.response?.data?.error || 'Failed to load saved plans');
    }
  };

  useEffect(() => {
    if (token) {
      fetchSavedPlans();
    }
  }, [token]);

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (showModal && countdown > 0) {
      timer = setInterval(() => {
        setCountdown((prev) => prev - 1);
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [showModal, countdown]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleMultiSelectChange = (name: string, value: string) => {
    const currentValues = formData[name as keyof typeof formData] as string[];
    if (currentValues.includes(value)) {
      setFormData({
        ...formData,
        [name]: currentValues.filter(item => item !== value)
      });
    } else {
      setFormData({
        ...formData,
        [name]: [...currentValues, value]
      });
    }
  };

  const handleToggleChange = (name: string, checked: boolean) => {
    setFormData({
      ...formData,
      [name]: checked
    });
  };

 const handleGenerate = async () => {
  if (!prompt.trim()) {
    toast.warning('Please enter a prompt');
    return;
  }

  // Validate token exists
  if (!token) {
    toast.error('Please log in to generate a workout plan');
    return;
  }

  setLoading(true);
  setShowModal(true);
  setCountdown(180);

  try {
    // Structure the data more cleanly
    const requestData = {
      prompt: prompt,
      bodyMetrics: {
        age: formData.age,
        sex: formData.sex,
        height: formData.height,
        weight: formData.weight,
        bodyFat: formData.bodyFat,
        muscleMass: formData.muscleMass,
      },
      fitnessProfile: {
        experienceLevel: formData.experienceLevel,
        primaryGoal: formData.primaryGoal,
        secondaryGoals: formData.secondaryGoals,
        targetAreas: formData.targetAreas,
        avoidAreas: formData.avoidAreas,
        injuries: formData.injuries,
      },
      equipment: {
        available: formData.availableEquipment,
        homeGym: formData.homeGym,
        resistanceBands: formData.resistanceBands,
        dumbbells: formData.dumbbells,
        barbell: formData.barbell,
        kettlebells: formData.kettlebells,
        pullUpBar: formData.pullUpBar,
        cardioMachine: formData.cardioMachine,
      },
      preferences: {
        workoutTime: formData.workoutTime,
        daysPerWeek: formData.daysPerWeek ? parseInt(formData.daysPerWeek) : undefined,
        intensity: formData.intensity,
        favoriteExercises: formData.favoriteExercises.split(',').map(e => e.trim()),
        dislikedExercises: formData.dislikedExercises.split(',').map(e => e.trim()),
      }
    };

    // Add error logging
    console.log('Sending request with data:', requestData);

    const res = await axios.post(
      '/api/workout-plans',
      requestData,
      {
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 180000 // 3 minute timeout
      }
    );
    
    // Validate response structure
    if (!res.data?.workoutPlan) {
      throw new Error('Invalid response structure from server');
    }

    setWorkoutPlan(res.data.workoutPlan);
    toast.success('Workout plan generated successfully');
  } catch (error: any) {
    console.error('Generate Error:', error);
    
    // More detailed error handling
    if (error.response) {
      // The request was made and the server responded with a status code
      console.error('Response data:', error.response.data);
      console.error('Response status:', error.response.status);
      console.error('Response headers:', error.response.headers);
      
      toast.error(error.response.data?.error || 
                 error.response.data?.message || 
                 'Failed to generate workout plan');
    } else if (error.request) {
      // The request was made but no response was received
      console.error('No response received:', error.request);
      toast.error('No response from server. Please try again.');
    } else {
      // Something happened in setting up the request
      console.error('Request setup error:', error.message);
      toast.error('Error setting up request: ' + error.message);
    }
  } finally {
    setLoading(false);
    setShowModal(false);
  }
};

  const handleSave = async () => {
    if (saving || !workoutPlan) return;

    setSaving(true);
    try {
      await axios.post(
        '/api/workout-plans/save',
        {
          ...workoutPlan,
          prompt: workoutPlan.prompt || prompt,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      toast.success('Workout plan saved successfully');
      await fetchSavedPlans();
      setActiveTab('saved');
    } catch (error: any) {
      console.error('Save Error:', error);
      toast.error(error.response?.data?.error || 'Failed to save workout plan');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async (planId: string) => {
    try {
      await axios.delete(`/api/workout-plans/${planId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      toast.success('Workout plan deleted');
      await fetchSavedPlans();
    } catch (error: any) {
      console.error('Delete Error:', error);
      toast.error(error.response?.data?.error || 'Failed to delete plan');
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const goalOptions = [
    "Muscle Gain",
    "Fat Loss",
    "Strength",
    "Endurance",
    "Mobility",
    "Rehabilitation",
    "Sports Performance",
    "General Fitness"
  ];

  const targetAreaOptions = [
    "Chest",
    "Back",
    "Shoulders",
    "Arms",
    "Legs",
    "Core",
    "Glutes",
    "Full Body"
  ];

  const experienceLevels = [
    "Beginner",
    "Intermediate",
    "Advanced",
    "Athlete"
  ];

  const intensityLevels = [
    "Low",
    "Moderate",
    "High",
    "Extreme"
  ];

  const workoutTimes = [
    "Morning",
    "Afternoon",
    "Evening",
    "Any"
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Personalized Workout Plan Generator</h1>
          <p className="text-gray-600">Get a customized training program tailored to your body, goals, and equipment</p>
        </motion.div>

        <Tabs 
          value={activeTab} 
          onValueChange={setActiveTab}
          className="bg-white rounded-xl shadow-lg overflow-hidden"
        >
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="generate">Generate Plan</TabsTrigger>
            <TabsTrigger value="saved">Saved Plans</TabsTrigger>
          </TabsList>

          <TabsContent value="generate" className="p-6">
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold mb-4">Tell Us About Your Fitness Goals</h2>
                <Textarea
                  placeholder="Describe your fitness goals, preferences, injuries, or any special requirements..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  className="min-h-[120px]"
                  disabled={loading}
                />
              </div>

              <div className="space-y-4">
                <h2 className="text-xl font-semibold">Your Fitness Profile</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Body Metrics</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium mb-1">Age</label>
                        <Input 
                          name="age" 
                          value={formData.age} 
                          onChange={handleInputChange} 
                          type="number" 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Sex</label>
                        <Select 
                          value={formData.sex} 
                          onValueChange={(value) => handleSelectChange('sex', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select sex" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="male">Male</SelectItem>
                            <SelectItem value="female">Female</SelectItem>
                            <SelectItem value="other">Other</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Height (cm)</label>
                        <Input 
                          name="height" 
                          value={formData.height} 
                          onChange={handleInputChange} 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Weight (kg)</label>
                        <Input 
                          name="weight" 
                          value={formData.weight} 
                          onChange={handleInputChange} 
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Fitness Profile</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium mb-1">Experience Level</label>
                        <Select 
                          value={formData.experienceLevel} 
                          onValueChange={(value) => handleSelectChange('experienceLevel', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select level" />
                          </SelectTrigger>
                          <SelectContent>
                            {experienceLevels.map(level => (
                              <SelectItem key={level} value={level.toLowerCase()}>{level}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Primary Goal</label>
                        <Select 
                          value={formData.primaryGoal} 
                          onValueChange={(value) => handleSelectChange('primaryGoal', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select goal" />
                          </SelectTrigger>
                          <SelectContent>
                            {goalOptions.map(goal => (
                              <SelectItem key={goal} value={goal.toLowerCase().replace(' ', '-')}>{goal}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Target Areas</label>
                        <div className="flex flex-wrap gap-2">
                          {targetAreaOptions.map(area => (
                            <Badge 
                              key={area}
                              variant={formData.targetAreas.includes(area) ? 'default' : 'outline'}
                              className="cursor-pointer"
                              onClick={() => handleMultiSelectChange('targetAreas', area)}
                            >
                              {area}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Injuries/Conditions</label>
                        <Input 
                          name="injuries" 
                          value={formData.injuries.join(', ')} 
                          onChange={(e) => setFormData({...formData, injuries: e.target.value.split(',').map(i => i.trim())})}
                          placeholder="e.g., Bad knee, Shoulder pain"
                        />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Equipment Availability</CardTitle>
                  </CardHeader>
                  <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-4">
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="homeGym" 
                          checked={formData.homeGym} 
                          onCheckedChange={(checked) => handleToggleChange('homeGym', checked)} 
                        />
                        <Label htmlFor="homeGym">Home Gym</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="dumbbells" 
                          checked={formData.dumbbells} 
                          onCheckedChange={(checked) => handleToggleChange('dumbbells', checked)} 
                        />
                        <Label htmlFor="dumbbells">Dumbbells</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="barbell" 
                          checked={formData.barbell} 
                          onCheckedChange={(checked) => handleToggleChange('barbell', checked)} 
                        />
                        <Label htmlFor="barbell">Barbell</Label>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="resistanceBands" 
                          checked={formData.resistanceBands} 
                          onCheckedChange={(checked) => handleToggleChange('resistanceBands', checked)} 
                        />
                        <Label htmlFor="resistanceBands">Resistance Bands</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="pullUpBar" 
                          checked={formData.pullUpBar} 
                          onCheckedChange={(checked) => handleToggleChange('pullUpBar', checked)} 
                        />
                        <Label htmlFor="pullUpBar">Pull-up Bar</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch 
                          id="cardioMachine" 
                          checked={formData.cardioMachine} 
                          onCheckedChange={(checked) => handleToggleChange('cardioMachine', checked)} 
                        />
                        <Label htmlFor="cardioMachine">Cardio Machine</Label>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Workout Preferences</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-1">Preferred Workout Time</label>
                        <Select 
                          value={formData.workoutTime} 
                          onValueChange={(value) => handleSelectChange('workoutTime', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select time" />
                          </SelectTrigger>
                          <SelectContent>
                            {workoutTimes.map(time => (
                              <SelectItem key={time} value={time.toLowerCase()}>{time}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Days Per Week</label>
                        <Input 
                          name="daysPerWeek" 
                          value={formData.daysPerWeek} 
                          onChange={handleInputChange} 
                          type="number" 
                          min="1"
                          max="7"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Preferred Intensity</label>
                      <Select 
                        value={formData.intensity} 
                        onValueChange={(value) => handleSelectChange('intensity', value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select intensity" />
                        </SelectTrigger>
                        <SelectContent>
                          {intensityLevels.map(level => (
                            <SelectItem key={level} value={level.toLowerCase()}>{level}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Favorite Exercises</label>
                      <Input 
                        name="favoriteExercises" 
                        value={formData.favoriteExercises} 
                        onChange={handleInputChange} 
                        placeholder="e.g., Squats, Bench Press, Pull-ups"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Exercises to Avoid</label>
                      <Input 
                        name="dislikedExercises" 
                        value={formData.dislikedExercises} 
                        onChange={handleInputChange} 
                        placeholder="e.g., Burpees, Leg Press"
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Button
                onClick={handleGenerate}
                disabled={loading}
                className="w-full py-6 text-lg"
              >
                {loading ? (
                  <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Icons.dumbbell  />
                )}
                Generate Personalized Workout Plan
              </Button>
            </div>
          </TabsContent>

          <TabsContent value="saved" className="p-6">
            {savedPlans.length === 0 ? (
              <div className="text-center py-12">
                <Icons.fileWarning className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-4 text-lg font-medium text-gray-900">No saved plans yet</h3>
                <p className="mt-1 text-sm text-gray-500">Generate your first workout plan to get started.</p>
                <Button 
                  onClick={() => setActiveTab('generate')} 
                  className="mt-6"
                >
                  Generate Plan
                </Button>
              </div>
            ) : (
              <ScrollArea className="h-[500px]">
                <div className="space-y-4">
                  {savedPlans.map((plan) => (
                    <Card key={plan.id} className="hover:shadow-md transition-shadow">
                      <CardHeader className="flex flex-row justify-between items-start space-y-0 pb-2">
                        <div>
                          <CardTitle>
                            Plan for {format(new Date(plan.date), 'PPP')}
                          </CardTitle>
                          {plan.fitnessProfile?.primaryGoal && (
                            <Badge variant="outline" className="mt-1">
                              {plan.fitnessProfile.primaryGoal}
                            </Badge>
                          )}
                          {plan.duration && (
                            <Badge variant="secondary" className="ml-2">
                              {plan.duration} min
                            </Badge>
                          )}
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(plan.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Icons.trash className="h-4 w-4" />
                        </Button>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-3">
                          {plan.exercises.map((exercise, idx) => (
                            <div key={idx} className="border-l-4 border-primary pl-3 py-1">
                              <h4 className="font-medium">{exercise.exercise_name}</h4>
                              <p className="text-sm text-gray-600">
                                {exercise.sets} sets × {exercise.reps} reps @ {exercise.weight}kg
                                {exercise.rest && ` • Rest: ${exercise.rest}`}
                              </p>
                              {exercise.notes && (
                                <p className="text-xs text-gray-500 mt-1">{exercise.notes}</p>
                              )}
                            </div>
                          ))}
                        </div>
                        {plan.notes && (
                          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                            <h4 className="font-medium text-sm">Notes</h4>
                            <p className="text-sm text-gray-600">{plan.notes}</p>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </ScrollArea>
            )}
          </TabsContent>
        </Tabs>

        {workoutPlan && !showModal && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-8"
          >
            <Card className="border-primary">
              <CardHeader>
                <CardTitle className="text-2xl">
                  Your Personalized Workout Plan
                </CardTitle>
                <p className="text-sm text-gray-500">
                  Generated for {format(new Date(workoutPlan.date), 'PPP')}
                  {workoutPlan.duration && ` • ${workoutPlan.duration} minutes`}
                </p>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {workoutPlan.exercises.map((exercise, idx) => (
                    <div key={idx} className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Icons.dumbbell />
                        <h3 className="text-lg font-semibold">{exercise.exercise_name}</h3>
                      </div>
                      <div className="pl-6">
                        <p className="flex items-center gap-1">
                          <Icons.repeat className="h-3 w-3 text-muted-foreground" />
                          <span>{exercise.sets} sets × {exercise.reps} reps</span>
                        </p>
                        {exercise.weight > 0 && (
                          <p className="flex items-center gap-1">
                            <Icons.weight className="h-3 w-3 text-muted-foreground" />
                            <span>{exercise.weight} kg</span>
                          </p>
                        )}
                        {exercise.rest && (
                          <p className="flex items-center gap-1">
                            <Icons.clock className="h-3 w-3 text-muted-foreground" />
                            <span>Rest: {exercise.rest}</span>
                          </p>
                        )}
                        {exercise.notes && (
                          <p className="text-sm text-muted-foreground mt-1">{exercise.notes}</p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
                
                {workoutPlan.notes && (
                  <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-medium flex items-center gap-2 mb-2">
                      <Icons.info className="h-4 w-4" />
                      Trainer Notes
                    </h4>
                    <p className="text-sm">{workoutPlan.notes}</p>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setWorkoutPlan(null)}>
                  Close
                </Button>
                <Button onClick={handleSave} disabled={saving}>
                  {saving ? (
                    <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Icons.save className="mr-2 h-4 w-4" />
                  )}
                  Save Plan
                </Button>
              </CardFooter>
            </Card>
          </motion.div>
        )}
      </div>

      <AnimatePresence>
        {showModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              className="bg-white dark:bg-gray-900 rounded-2xl shadow-xl max-w-md w-full p-6 text-center"
            >
              <div className="flex justify-center mb-6">
                <div className="relative">
                  <Icons.heart className="h-12 w-12 text-primary animate-pulse" />
                  <Icons.dumbbell  />
                </div>
              </div>
              
              <h3 className="text-xl font-bold mb-2">Crafting Your Perfect Plan</h3>
              <p className="text-gray-600 mb-6">
                Our fitness AI is designing a personalized workout routine based on your profile and goals.
                This typically takes 1-3 minutes.
              </p>
              
              <div className="mb-6">
                <div className="flex justify-between text-sm text-gray-500 mb-1">
                  <span>Estimated time remaining</span>
                  <span>{formatTime(countdown)}</span>
                </div>
                <Progress 
                  value={(1 - countdown/180) * 100} 
                  className="h-2" 
                />
              </div>
              
              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 text-left">
                <div className="flex items-start gap-3">
                  <Icons.lightbulb className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                  <p className="text-sm text-blue-800 dark:text-blue-200">
                    While you wait, consider doing some light stretching. Proper warm-up is crucial for injury prevention and workout performance.
                  </p>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default WorkoutGenerator;