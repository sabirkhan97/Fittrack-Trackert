import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast, Toaster } from 'sonner';

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Icons } from '@/components/icons';
import { PasswordInput } from '@/components/PasswordInput';

const API = import.meta.env.VITE_API_URL;


const formSchema = z.object({
  email: z.string().email({ message: 'Valid email required' }),
  username: z
    .string()
    .min(3, { message: '3 characters minimum' })
    .max(20, { message: '20 characters maximum' })
    .regex(/^[a-zA-Z0-9_]+$/, {
      message: 'Letters, numbers, underscores only',
    }),
  password: z
    .string()
    .min(8, { message: '8 characters minimum' })
    .regex(/[A-Z]/, { message: 'Include uppercase letter' })
    .regex(/[0-9]/, { message: 'Include number' }),
});

export default function Signup() {
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      username: '',
      password: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    try {
      const response = await axios.post(`${API}/api/auth/signup`, values);
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        toast.success('Welcome to FitTrack');
        navigate('/dashboard');
      }
    } catch (error: any) {
      console.error('Signup error:', error);
      if (error.response) {
        if (error.response.status === 409) {
          if (error.response.data.error.includes('Email')) {
            form.setError('email', { message: 'Email already in use' });
            toast.error('Email already registered');
          } else if (error.response.data.error.includes('Username')) {
            form.setError('username', { message: 'Username taken' });
            toast.error('Username already taken');
          }
        } else {
          // Show the actual server error message
          toast.error(error.response.data.message || error.response.data.error || 'Signup failed');
        }
      } else {
        toast.error('Network error - could not connect to server');
      }
      form.resetField('password');
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-background">
      <Toaster position="top-center" />
      <Card className="w-full max-w-md border-0 shadow-none">
        <CardHeader className="space-y-1 text-center">
          <div className="flex justify-center items-center">
            <Icons.dumbbell />
            <span className="ml-2 text-xl font-semibold">FitTrack</span>
          </div>
          <CardTitle className="text-xl">Create Account</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input placeholder="yourusername" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="you@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <PasswordInput placeholder="••••••••" autoComplete="new-password" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                    Creating account...
                  </>
                ) : (
                  'Sign Up'
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex flex-col gap-3">
          <div className="text-sm text-muted-foreground">
            Already have an account?{' '}
            <Button variant="link" className="p-0 h-auto" onClick={() => navigate('/login')}>
              Sign in
            </Button>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}