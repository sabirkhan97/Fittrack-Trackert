import { Button } from '@/components/ui/button';
import { Icons } from '@/components/icons';
import { useNavigate, useLocation } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { ModeToggle } from '@/context/ModeToggle';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { motion, AnimatePresence } from 'framer-motion';
import axios from 'axios';

// Mobile Menu Component
function MobileMenu({
  isActive,
  navigate,
  setMobileMenuOpen,
  handleLogout,
  isAuthenticated,
}: {
  isActive: (path: string) => boolean;
  navigate: (path: string) => void;
  setMobileMenuOpen: (open: boolean) => void;
  handleLogout: () => void;
  isAuthenticated: boolean;
}) {
  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-40 md:hidden"
      >
        <div
          className="fixed inset-0 bg-black/50 backdrop-blur-sm"
          onClick={() => setMobileMenuOpen(false)}
        />
        <motion.div
          initial={{ x: '100%' }}
          animate={{ x: 0 }}
          exit={{ x: '100%' }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
          className="fixed top-16 right-0 w-72 h-[calc(100vh-4rem)] bg-background border-l p-4 space-y-2"
        >
          <nav className="space-y-1">
            {[
              { path: '/gym-notes', label: 'Workouts', icon: <Icons.dumbbell /> },
              { path: '/workout-summary', label: 'Previous Workouts', icon: <Icons.barChart className="h-4 w-4" /> },
              { path: '/exercises', label: 'Exercises', icon: <Icons.list className="h-4 w-4" /> },
              { path: '/progress', label: 'Progress', icon: <Icons.trendingUp className="h-4 w-4" /> },
              { path: '/about', label: 'About', icon: <Icons.info className="h-4 w-4" /> },
              { path: '/savedExercise', label: 'Saved Exercise', icon: <Icons.save className="h-4 w-4" /> },
              { path: '/generate-workout', label: 'Generate Workout', icon: <Icons.sparkles className="h-4 w-4" /> },

            ].map((item) => (
              <Button
                key={item.path}
                variant="ghost"
                className={`w-full justify-start gap-2 ${isActive(item.path) ? 'bg-accent' : ''}`}
                onClick={() => {
                  navigate(item.path);
                  setMobileMenuOpen(false);
                }}
                disabled={item.path === '/progress'}
              >
                {item.icon}
                {item.label}
                {item.path === '/progress' && (
                  <span className="ml-auto px-2 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-500">
                    Soon
                  </span>
                )}
              </Button>
            ))}
          </nav>

          <div className="pt-4 border-t space-y-2">
            {isAuthenticated ? (
              <>
                <Button
                  variant="ghost"
                  className="w-full justify-start gap-2"
                  onClick={() => {
                    navigate('/profile');
                    setMobileMenuOpen(false);
                  }}
                >
                  <Icons.user className="h-4 w-4" />
                  Profile
                </Button>
                <Button
                  variant="ghost"
                  className="w-full justify-start gap-2 text-red-600 hover:text-red-600 dark:text-red-400 dark:hover:text-red-400"
                  onClick={handleLogout}
                >
                  <Icons.logout className="h-4 w-4" />
                  Sign Out
                </Button>
              </>
            ) : (
              <>
                <Button
                  variant="ghost"
                  className="w-full justify-start gap-2"
                  onClick={() => {
                    navigate('/login');
                    setMobileMenuOpen(false);
                  }}
                >
                  <Icons.login className="h-4 w-4" />
                  Sign In
                </Button>
                <Button
                  variant="default"
                  className="w-full justify-start gap-2"
                  onClick={() => {
                    navigate('/signup');
                    setMobileMenuOpen(false);
                  }}
                >
                  <Icons.userPlus className="h-4 w-4" />
                  Create Account
                </Button>
              </>
            )}
            <div className="flex justify-center pt-2">
              <ModeToggle />
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}

export function Header() {
  const navigate = useNavigate();
  const location = useLocation();
  const [scrolled, setScrolled] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [usernameInitial, setUsernameInitial] = useState('U');

  useEffect(() => {
    const token = localStorage.getItem('token');
    setIsAuthenticated(!!token);

    if (token) {
      const fetchProfile = async () => {
        try {
          const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/profile`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          const username = response.data.user.username;
          if (username && typeof username === 'string' && username.length > 0) {
            setUsernameInitial(username.charAt(0).toUpperCase());
          }
        } catch (error: any) {
          console.error('Fetch profile error in Header:', error.response?.data || error.message);
          if (error.response?.status === 401) {
            localStorage.removeItem('token');
            setIsAuthenticated(false);
            navigate('/login');
          }
        }
      };
      fetchProfile();
    }

    const handleScroll = () => {
      setScrolled(window.scrollY > 10);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [navigate]);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsAuthenticated(false);
    setUsernameInitial('U');
    navigate('/login');
  };

  const isActive = (path: string) => location.pathname === path;

  return (
    <header
      className={`sticky top-0 z-50 w-full border-b transition-all duration-300 ${scrolled
        ? 'bg-background/95 backdrop-blur-lg shadow-sm'
        : 'bg-background/90 backdrop-blur-sm'
        }`}
    >
      <div className="container flex h-16 items-center justify-between px-4 sm:px-6">
        {/* Logo/Brand */}
        <div className="flex items-center gap-4 md:gap-6">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => navigate(isAuthenticated ? '/gym-notes' : '/')}
            className="flex items-center gap-2 group"
            aria-label="Home"
          >
            <div className="p-1.5 rounded-lg bg-gradient-to-r from-primary to-purple-600 group-hover:opacity-90 transition-opacity">
              <Icons.dumbbell />
            </div>
            <span className="text-xl font-bold tracking-tighter bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent">
              FitTrack Pro
            </span>
          </motion.button>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center gap-1">
            {[
              { path: '/gym-notes', label: 'Workouts', icon: <Icons.dumbbell /> },
              { path: '/generate-workout', label: 'Generate Workout', icon: <Icons.sparkles className="h-4 w-4" /> },
              { path: '/workout-summary', label: 'Previous Workouts', icon: <Icons.barChart className="h-4 w-4" /> },
              { path: '/exercises', label: 'Exercises', icon: <Icons.list className="h-4 w-4" /> },
              { path: '/progress', label: 'Progress', icon: <Icons.trendingUp className="h-4 w-4" /> },
              { path: '/savedExercise', label: 'Saved Exercise', icon: <Icons.save className="h-4 w-4" /> },


            ].map((item) => (
              <Tooltip key={item.path}>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className={`px-3 font-medium rounded-lg gap-2 ${isActive(item.path)
                      ? 'bg-accent text-accent-foreground'
                      : 'text-muted-foreground hover:text-foreground'
                      }`}
                    onClick={() => navigate(item.path)}
                    disabled={item.path === '/progress'}
                  >
                    {item.icon}
                    {item.label}
                    {item.path === '/progress' && (
                      <span className="ml-1.5 px-1.5 py-0.5 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-500">
                        Soon
                      </span>
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="bottom">
                  {item.label} {item.path === '/progress' && '(Coming Soon)'}
                </TooltipContent>
              </Tooltip>
            ))}
          </nav>
        </div>

        {/* Right Side Controls */}
        <div className="flex items-center gap-2 sm:gap-3">
          {/* Theme Toggle - Desktop */}
          <div className="hidden sm:flex">
            <ModeToggle />
          </div>

          {/* Auth Buttons */}
          {isAuthenticated ? (
            <>
              {/* User Profile */}
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="hidden md:flex rounded-full"
                    onClick={() => navigate('/profile')}
                    aria-label="User profile"
                  >
                    <Avatar className="h-8 w-8">
                      <AvatarImage src="/avatars/default.png" />
                      <AvatarFallback className="bg-gradient-to-r from-primary to-purple-600 text-white">
                        {usernameInitial}
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Your Profile</TooltipContent>
              </Tooltip>

              {/* Logout */}
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="hidden md:flex gap-2"
                    onClick={handleLogout}
                  >
                    <Icons.logout className="h-4 w-4" />
                    <span>Sign Out</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Sign Out</TooltipContent>
              </Tooltip>
            </>
          ) : (
            <>
              <Button
                variant="ghost"
                size="sm"
                className="hidden md:flex"
                onClick={() => navigate('/login')}
              >
                Sign In
              </Button>
              <Button
                variant="default"
                size="sm"
                className="hidden md:flex"
                onClick={() => navigate('/signup')}
              >
                Get Started
              </Button>
            </>
          )}

          {/* Mobile Menu Button */}
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            aria-label="Toggle mobile menu"
          >
            {mobileMenuOpen ? (
              <Icons.close className="h-5 w-5" />
            ) : (
              <Icons.menu className="h-5 w-5" />
            )}
          </Button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <MobileMenu
          isActive={isActive}
          navigate={navigate}
          setMobileMenuOpen={setMobileMenuOpen}
          handleLogout={handleLogout}
          isAuthenticated={isAuthenticated}
        />
      )}
    </header>
  );
}