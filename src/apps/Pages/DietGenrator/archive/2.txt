"use client"

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'sonner';
import { Icons } from '@/components/icons';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { format } from 'date-fns';

interface Meal {
  meal_time: string;
  items: string[];
}

interface DietPlan {
  id: string;
  date: string;
  meals: Meal[];
  notes?: string;
  prompt?: string;
  bodyMetrics?: {
    age?: number;
    sex?: string;
    height?: string;
    weight?: string;
    bodyFat?: string;
    waistHip?: string;
  };
  fitnessGoals?: {
    primaryGoal?: string;
    targetWeight?: string;
    timeframe?: string;
    motivation?: string;
  };
  currentRoutine?: {
    daysPerWeek?: number;
    workoutTypes?: string[];
    duration?: string;
    intensity?: string;
    program?: string;
  };
  dietaryHabits?: {
    mealsPerDay?: number;
    typicalFoods?: string;
    breakfastHabit?: string;
    prePostWorkout?: string;
    weekendPattern?: string;
  };
  macros?: {
    proteinIntake?: string;
    carbFatPref?: string;
    trackingApp?: string;
  };
  hydration?: {
    waterIntake?: string;
    electrolytes?: string;
    dehydrationSigns?: string;
  };
  supplements?: {
    current?: string;
    pastExperiences?: string;
    openTo?: boolean;
  };
  health?: {
    injuries?: string;
    medicalConditions?: string;
    digestion?: string;
    sleep?: string;
    energyLevels?: string;
  };
  lifestyle?: {
    jobType?: string;
    dailySteps?: string;
    mealPrepTime?: string;
    foodBudget?: string;
  };
}

const DietGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [dietPlan, setDietPlan] = useState<DietPlan | null>(null);
  const [savedPlans, setSavedPlans] = useState<DietPlan[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('generate');
  const [countdown, setCountdown] = useState(180);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({
    age: '',
    sex: '',
    height: '',
    weight: '',
    bodyFat: '',
    waistHip: '',
    primaryGoal: '',
    targetWeight: '',
    timeframe: '',
    motivation: '',
    daysPerWeek: '',
    workoutTypes: '',
    duration: '',
    intensity: '',
    program: '',
    mealsPerDay: '',
    typicalFoods: '',
    breakfastHabit: '',
    prePostWorkout: '',
    weekendPattern: '',
    proteinIntake: '',
    carbFatPref: '',
    trackingApp: '',
    waterIntake: '',
    electrolytes: '',
    dehydrationSigns: '',
    currentSupplements: '',
    pastExperiences: '',
    openToSupplements: false,
    injuries: '',
    medicalConditions: '',
    digestion: '',
    sleep: '',
    energyLevels: '',
    jobType: '',
    dailySteps: '',
    mealPrepTime: '',
    foodBudget: ''
  });

  const token = localStorage.getItem('token');

  const fetchSavedPlans = async () => {
    try {
      const res = await axios.get('/api/diet-plans/my', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSavedPlans(res.data.plans);
    } catch (error: any) {
      console.error('Fetch Saved Plans Error:', error);
      toast.error(error.response?.data?.error || 'Failed to load saved plans');
    }
  };

  useEffect(() => {
    if (token) {
      fetchSavedPlans();
    }
  }, [token]);

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (showModal && countdown > 0) {
      timer = setInterval(() => {
        setCountdown((prev) => prev - 1);
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [showModal, countdown]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    const checked = type === 'checkbox' ? (e.target as HTMLInputElement).checked : undefined;
    
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast.warning('Please enter a prompt');
      return;
    }

    setLoading(true);
    setShowModal(true);
    setCountdown(180);

    try {
      const fullPrompt = `${prompt}\n\nClient Details:\n${JSON.stringify(formData, null, 2)}`;

      const res = await axios.post(
        '/api/diet-plans',
        { prompt: fullPrompt },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setDietPlan({
        ...res.data.dietPlan,
        bodyMetrics: {
          age: formData.age,
          sex: formData.sex,
          height: formData.height,
          weight: formData.weight,
          bodyFat: formData.bodyFat,
          waistHip: formData.waistHip,
        },
        fitnessGoals: {
          primaryGoal: formData.primaryGoal,
          targetWeight: formData.targetWeight,
          timeframe: formData.timeframe,
          motivation: formData.motivation,
        },
        currentRoutine: {
          daysPerWeek: formData.daysPerWeek,
          workoutTypes: formData.workoutTypes,
          duration: formData.duration,
          intensity: formData.intensity,
          program: formData.program,
        },
        dietaryHabits: {
          mealsPerDay: formData.mealsPerDay,
          typicalFoods: formData.typicalFoods,
          breakfastHabit: formData.breakfastHabit,
          prePostWorkout: formData.prePostWorkout,
          weekendPattern: formData.weekendPattern,
        },
        macros: {
          proteinIntake: formData.proteinIntake,
          carbFatPref: formData.carbFatPref,
          trackingApp: formData.trackingApp,
        },
        hydration: {
          waterIntake: formData.waterIntake,
          electrolytes: formData.electrolytes,
          dehydrationSigns: formData.dehydrationSigns,
        },
        supplements: {
          current: formData.currentSupplements,
          pastExperiences: formData.pastExperiences,
          openTo: formData.openToSupplements,
        },
        health: {
          injuries: formData.injuries,
          medicalConditions: formData.medicalConditions,
          digestion: formData.digestion,
          sleep: formData.sleep,
          energyLevels: formData.energyLevels,
        },
        lifestyle: {
          jobType: formData.jobType,
          dailySteps: formData.dailySteps,
          mealPrepTime: formData.mealPrepTime,
          foodBudget: formData.foodBudget,
        }
      });
      
      toast.success('Diet plan generated successfully');
    } catch (error: any) {
      console.error('Generate Error:', error);
      toast.error(error.response?.data?.error || 'Failed to generate diet plan');
    } finally {
      setLoading(false);
      setShowModal(false);
    }
  };

  const handleSave = async () => {
    if (saving || !dietPlan) return;

    setSaving(true);
    try {
      await axios.post(
        '/api/diet-plans/save',
        {
          ...dietPlan,
          prompt: dietPlan.prompt || prompt,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      toast.success('Diet plan saved successfully');
      await fetchSavedPlans();
      setActiveTab('saved');
    } catch (error: any) {
      console.error('Save Error:', error);
      toast.error(error.response?.data?.error || 'Failed to save diet plan');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async (planId: string) => {
    try {
      await axios.delete(`/api/diet-plans/${planId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      toast.success('Diet plan deleted');
      await fetchSavedPlans();
    } catch (error: any) {
      console.error('Delete Error:', error);
      toast.error(error.response?.data?.error || 'Failed to delete plan');
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Personalized Diet Plan Generator</h1>
          <p className="text-gray-600">Get a customized nutrition plan tailored to your body and goals</p>
        </motion.div>

        <Tabs 
          value={activeTab} 
          onValueChange={setActiveTab}
          className="bg-white rounded-xl shadow-lg overflow-hidden"
        >
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="generate">Generate Plan</TabsTrigger>
            <TabsTrigger value="saved">Saved Plans</TabsTrigger>
          </TabsList>

          <TabsContent value="generate" className="p-6">
            <div className="space-y-6">
              <div>
                <h2 className="text-xl font-semibold mb-4">Tell Us About Your Goals</h2>
                <Textarea
                  placeholder="Describe your nutrition goals, preferences, allergies, or any special requirements..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  className="min-h-[120px]"
                  disabled={loading}
                />
              </div>

              <div className="space-y-4">
                <h2 className="text-xl font-semibold">Your Profile Details</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Body Metrics</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium mb-1">Age</label>
                        <Input 
                          name="age" 
                          value={formData.age} 
                          onChange={handleInputChange} 
                          type="number" 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Sex</label>
                        <select 
                          name="sex" 
                          value={formData.sex} 
                          onChange={handleInputChange}
                          className="w-full border rounded-md p-2"
                        >
                          <option value="">Select</option>
                          <option value="male">Male</option>
                          <option value="female">Female</option>
                          <option value="other">Other</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Height (cm)</label>
                        <Input 
                          name="height" 
                          value={formData.height} 
                          onChange={handleInputChange} 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Weight (kg)</label>
                        <Input 
                          name="weight" 
                          value={formData.weight} 
                          onChange={handleInputChange} 
                        />
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Fitness Goals</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium mb-1">Primary Goal</label>
                        <select 
                          name="primaryGoal" 
                          value={formData.primaryGoal} 
                          onChange={handleInputChange}
                          className="w-full border rounded-md p-2"
                        >
                          <option value="">Select</option>
                          <option value="fat-loss">Fat Loss</option>
                          <option value="muscle-gain">Muscle Gain</option>
                          <option value="endurance">Endurance</option>
                          <option value="strength">Strength</option>
                          <option value="recomposition">Recomposition</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Target Weight (kg)</label>
                        <Input 
                          name="targetWeight" 
                          value={formData.targetWeight} 
                          onChange={handleInputChange} 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Timeframe</label>
                        <Input 
                          name="timeframe" 
                          value={formData.timeframe} 
                          onChange={handleInputChange} 
                          placeholder="e.g., 3 months" 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Motivation</label>
                        <Input 
                          name="motivation" 
                          value={formData.motivation} 
                          onChange={handleInputChange} 
                          placeholder="Why is this important to you?" 
                        />
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Current Routine</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-1">Days/Week Training</label>
                        <Input 
                          name="daysPerWeek" 
                          value={formData.daysPerWeek} 
                          onChange={handleInputChange} 
                          type="number" 
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium mb-1">Workout Types</label>
                        <Input 
                          name="workoutTypes" 
                          value={formData.workoutTypes} 
                          onChange={handleInputChange} 
                          placeholder="e.g., Weightlifting, Cardio" 
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Program Followed</label>
                      <Input 
                        name="program" 
                        value={formData.program} 
                        onChange={handleInputChange} 
                        placeholder="e.g., CrossFit, PPL, etc." 
                      />
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Button
                onClick={handleGenerate}
                disabled={loading}
                className="w-full py-6 text-lg"
              >
                {loading ? (
                  <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Icons.zap className="mr-2 h-4 w-4" />
                )}
                Generate Personalized Diet Plan
              </Button>
            </div>
          </TabsContent>

          <TabsContent value="saved" className="p-6">
            {savedPlans.length === 0 ? (
              <div className="text-center py-12">
                <Icons.fileWarning className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-4 text-lg font-medium text-gray-900">No saved plans yet</h3>
                <p className="mt-1 text-sm text-gray-500">Generate your first diet plan to get started.</p>
                <Button 
                  onClick={() => setActiveTab('generate')} 
                  className="mt-6"
                >
                  Generate Plan
                </Button>
              </div>
            ) : (
              <ScrollArea className="h-[500px]">
                <div className="space-y-4">
                  {savedPlans.map((plan) => (
                    <Card key={plan.id} className="hover:shadow-md transition-shadow">
                      <CardHeader className="flex flex-row justify-between items-start space-y-0 pb-2">
                        <div>
                          <CardTitle>
                            Plan for {format(new Date(plan.date), 'PPP')}
                          </CardTitle>
                          {plan.fitnessGoals?.primaryGoal && (
                            <Badge variant="outline" className="mt-1">
                              {plan.fitnessGoals.primaryGoal}
                            </Badge>
                          )}
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(plan.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Icons.trash className="h-4 w-4" />
                        </Button>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-3">
                          {plan.meals.map((meal, idx) => (
                            <div key={idx} className="border-l-4 border-primary pl-3 py-1">
                              <h4 className="font-medium">{meal.meal_time}</h4>
                              <ul className="list-disc list-inside text-sm text-gray-600">
                                {meal.items.map((item, i) => (
                                  <li key={i}>{item}</li>
                                ))}
                              </ul>
                            </div>
                          ))}
                        </div>
                        {plan.notes && (
                          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                            <h4 className="font-medium text-sm">Notes</h4>
                            <p className="text-sm text-gray-600">{plan.notes}</p>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </ScrollArea>
            )}
          </TabsContent>
        </Tabs>

        {dietPlan && !showModal && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-8"
          >
            <Card className="border-primary">
              <CardHeader>
                <CardTitle className="text-2xl">
                  Your Personalized Diet Plan
                </CardTitle>
                <p className="text-sm text-gray-500">
                  Generated for {format(new Date(dietPlan.date), 'PPP')}
                </p>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {dietPlan.meals.map((meal, idx) => (
                    <div key={idx} className="space-y-2">
                      <h3 className="text-lg font-semibold flex items-center gap-2">
                        <Icons.utensils className="h-4 w-4" />
                        {meal.meal_time}
                      </h3>
                      <ul className="space-y-1 pl-5">
                        {meal.items.map((item, i) => (
                          <li key={i} className="flex items-start">
                            <span className="h-1.5 w-1.5 rounded-full bg-primary mt-2 mr-2"></span>
                            <span>{item}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
                
                {dietPlan.notes && (
                  <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-medium flex items-center gap-2 mb-2">
                      <Icons.info className="h-4 w-4" />
                      Important Notes
                    </h4>
                    <p className="text-sm">{dietPlan.notes}</p>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setDietPlan(null)}>
                  Close
                </Button>
                <Button onClick={handleSave} disabled={saving}>
                  {saving ? (
                    <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Icons.save className="mr-2 h-4 w-4" />
                  )}
                  Save Plan
                </Button>
              </CardFooter>
            </Card>
          </motion.div>
        )}
      </div>

      <AnimatePresence>
        {showModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              className="bg-white dark:bg-gray-900 rounded-2xl shadow-xl max-w-md w-full p-6 text-center"
            >
              <div className="flex justify-center mb-6">
                <div className="relative">
                  <Icons.heart className="h-12 w-12 text-primary animate-pulse" />
                  <Icons.utensils className="h-6 w-6 text-white absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
                </div>
              </div>
              
              <h3 className="text-xl font-bold mb-2">Creating Your Perfect Plan</h3>
              <p className="text-gray-600 mb-6">
                Our nutrition AI is crafting a personalized diet plan based on your profile and goals.
                This typically takes 1-3 minutes.
              </p>
              
              <div className="mb-6">
                <div className="flex justify-between text-sm text-gray-500 mb-1">
                  <span>Estimated time remaining</span>
                  <span>{formatTime(countdown)}</span>
                </div>
                <Progress 
                  value={(1 - countdown/180) * 100} 
                  className="h-2" 
                />
              </div>
              
              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 text-left">
                <div className="flex items-start gap-3">
                  <Icons.lightbulb className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                  <p className="text-sm text-blue-800 dark:text-blue-200">
                    While you wait, consider drinking a glass of water. Proper hydration is the foundation of any successful nutrition plan.
                  </p>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default DietGenerator;