import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'sonner';
import { format, isSameDay, parseISO } from 'date-fns';
import { useState, useMemo, useEffect } from 'react';
import { ChevronDown, ChevronUp, Plus, Trash2, Search, Filter, X, Calendar as CalendarIcon, Dumbbell, Activity, HeartPulse } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Collapsible,
  CollapsibleTrigger,
  CollapsibleContent,
} from '@/components/ui/collapsible';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';

interface Workout {
  _id: string;
  exercise_name: string;
  sets: number;
  reps: number;
  weight?: number;
  exercise_date: string;
  workout_type?: string;
  muscle_group?: string;
  set_type?: string;
  additional_exercises?: string[];
  notes?: string;
  duration?: number;
  intensity?: number;
}

function DatePicker({
  selected,
  onSelect,
  placeholder = "Select date",
  className,
}: {
  selected: Date | null;
  onSelect: (date: Date | null) => void;
  placeholder?: string;
  className?: string;
}) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          className={`w-full justify-start text-left font-normal hover:bg-accent/50 transition-colors ${
            !selected ? "text-muted-foreground" : ""
          } ${className}`}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {selected ? format(selected, "PPP") : <span>{placeholder}</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0 rounded-xl shadow-lg border-border">
        <Calendar
          mode="single"
          selected={selected || undefined}
          onSelect={(date) => onSelect(date || null)}
          initialFocus
          className="bg-background"
          styles={{
            day: {
              borderRadius: '6px',
            },
          }}
        />
      </PopoverContent>
    </Popover>
  );
}

function WorkoutStats({ workouts }: { workouts: Workout[] }) {
  const stats = useMemo(() => {
    const totalWorkouts = workouts.length;
    const totalSets = workouts.reduce((sum, w) => sum + w.sets, 0);
    const totalReps = workouts.reduce((sum, w) => sum + w.reps, 0);
    const totalVolume = workouts.reduce((sum, w) => sum + (w.weight || 0) * w.sets * w.reps, 0);
    
    return { totalWorkouts, totalSets, totalReps, totalVolume };
  }, [workouts]);

  return (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
      <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/10 border-blue-500/20">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-blue-500 font-medium">Workouts</p>
              <h3 className="text-2xl font-bold">{stats.totalWorkouts}</h3>
            </div>
            <Dumbbell className="h-6 w-6 text-blue-500" />
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-gradient-to-br from-purple-500/10 to-purple-600/10 border-purple-500/20">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-purple-500 font-medium">Sets</p>
              <h3 className="text-2xl font-bold">{stats.totalSets}</h3>
            </div>
            <Activity className="h-6 w-6 text-purple-500" />
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-gradient-to-br from-green-500/10 to-green-600/10 border-green-500/20">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-green-500 font-medium">Reps</p>
              <h3 className="text-2xl font-bold">{stats.totalReps}</h3>
            </div>
            <HeartPulse className="h-6 w-6 text-green-500" />
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-gradient-to-br from-orange-500/10 to-orange-600/10 border-orange-500/20">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-orange-500 font-medium">Volume (kg)</p>
              <h3 className="text-2xl font-bold">{stats.totalVolume}</h3>
            </div>
            <div className="h-6 w-6 flex items-center justify-center bg-orange-500/20 rounded-full">
              <span className="text-orange-500 text-sm font-bold">V</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default function WorkoutSummary() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const token = localStorage.getItem('token');

  // State for filters
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedWorkoutType, setSelectedWorkoutType] = useState<string>('all');
  const [selectedMuscleGroup, setSelectedMuscleGroup] = useState<string>('all');
  const [openCollapsibles, setOpenCollapsibles] = useState<Record<string, boolean>>({});
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');

  if (!token) {
    toast.error('Please login to view workouts');
    navigate('/login');
    return null;
  }

  // Fetch workouts
  const { data: workouts = [], isLoading, error } = useQuery<Workout[], Error>({
    queryKey: ['workouts', token],
    queryFn: async () => {
      try {
        const res = await axios.get('/api/exercises', {
          headers: { Authorization: `Bearer ${token}` },
        });
        return res.data.exercises.map((w: any) => ({
          ...w,
          additional_exercises: w.additional_exercises || [],
          notes: w.notes || '',
          duration: w.duration || 0,
          intensity: w.intensity || 3,
        }));
      } catch (err: any) {
        if (err.response?.status === 401 || err.response?.status === 403) {
          localStorage.removeItem('token');
          navigate('/login');
          toast.error('Session expired. Please login again.');
        }
        throw err;
      }
    },
    retry: 1,
  });

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      await axios.delete(`/api/exercises/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['workouts'] });
      toast.success('Workout deleted successfully');
    },
    onError: (err: any) => {
      toast.error('Failed to delete workout', {
        description: err.response?.data?.error || 'An error occurred',
      });
    },
  });

  // Extract unique filter options
  const workoutTypes = useMemo(() => {
    const types = new Set<string>();
    workouts.forEach((w) => w.workout_type && types.add(w.workout_type));
    return Array.from(types).sort();
  }, [workouts]);

  const muscleGroups = useMemo(() => {
    const groups = new Set<string>();
    workouts.forEach((w) => w.muscle_group && groups.add(w.muscle_group));
    return Array.from(groups).sort();
  }, [workouts]);

  // Filter workouts
  const filteredWorkouts = useMemo(() => {
    return workouts.filter((workout) => {
      if (selectedDate && !isSameDay(parseISO(workout.exercise_date), selectedDate)) {
        return false;
      }
      if (selectedWorkoutType !== "all" && workout.workout_type !== selectedWorkoutType) {
        return false;
      }
      if (selectedMuscleGroup !== "all" && workout.muscle_group !== selectedMuscleGroup) {
        return false;
      }
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        return (
          workout.exercise_name.toLowerCase().includes(searchLower) ||
          (workout.notes && workout.notes.toLowerCase().includes(searchLower)) ||
          (workout.additional_exercises && 
            workout.additional_exercises.some(ex => ex.toLowerCase().includes(searchLower)))
        );
      }
      return true;
    });
  }, [workouts, selectedDate, selectedWorkoutType, selectedMuscleGroup, searchTerm]);

  // Group workouts by date and type
  const groupedWorkouts = useMemo(() => {
    const groups: Record<string, Workout[]> = {};
    
    filteredWorkouts.forEach((workout) => {
      const date = format(parseISO(workout.exercise_date), 'MMMM d, yyyy');
      const key = `${date} - ${workout.workout_type || 'Other'} - ${workout.muscle_group || 'General'}`;
      
      if (!groups[key]) {
        groups[key] = [];
      }
      groups[key].push(workout);
    });
    
    return Object.entries(groups)
      .sort(([a], [b]) => {
        const dateA = new Date(a.split(' - ')[0]);
        const dateB = new Date(b.split(' - ')[0]);
        return dateB.getTime() - dateA.getTime();
      })
      .reduce((acc, [key, value]) => {
        acc[key] = value;
        return acc;
      }, {} as Record<string, Workout[]>);
  }, [filteredWorkouts]);

  // Clear all filters
  const clearFilters = () => {
    setSelectedDate(null);
    setSelectedWorkoutType('all');
    setSelectedMuscleGroup('all');
    setSearchTerm('');
  };

  // Auto-expand the first collapsible
  useEffect(() => {
    if (Object.keys(groupedWorkouts).length > 0 && Object.keys(openCollapsibles).length === 0) {
      const firstKey = Object.keys(groupedWorkouts)[0];
      setOpenCollapsibles({ [firstKey]: true });
    }
  }, [groupedWorkouts, openCollapsibles]);

  return (
    <div className="container mx-auto py-8 px-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Card className="mb-6 border-none shadow-lg">
          <CardHeader className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <CardTitle className="text-3xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent">
                Workout History
              </CardTitle>
              <CardDescription className="text-muted-foreground">
                Track and analyze your fitness journey
              </CardDescription>
            </div>
            <Button 
              onClick={() => navigate('/gym-notes')} 
              className="gap-2 bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90 transition-all"
            >
              <Plus size={18} />
              Add New Workout
            </Button>
          </CardHeader>
          
          <CardContent>
            {/* Stats Overview */}
            <WorkoutStats workouts={filteredWorkouts} />
            
            {/* Search and Filters */}
            <div className="flex flex-col gap-4 mb-6">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search workouts by name, notes, or exercises..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9 rounded-xl h-12"
                />
                {searchTerm && (
                  <Button
                    variant="ghost"
                    size="icon"
                    className="absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full"
                    onClick={() => setSearchTerm('')}
                  >
                    <X size={16} />
                  </Button>
                )}
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <DatePicker
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  placeholder="Filter by date"
                  className="w-full"
                />
                
                <Select
                  value={selectedWorkoutType}
                  onValueChange={setSelectedWorkoutType}
                >
                  <SelectTrigger className="rounded-xl h-12">
                    <SelectValue placeholder="Filter by workout type" />
                  </SelectTrigger>
                  <SelectContent className="rounded-xl">
                    <SelectItem value="all">All Types</SelectItem>
                    {workoutTypes.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                
                <Select
                  value={selectedMuscleGroup}
                  onValueChange={setSelectedMuscleGroup}
                >
                  <SelectTrigger className="rounded-xl h-12">
                    <SelectValue placeholder="Filter by muscle group" />
                  </SelectTrigger>
                  <SelectContent className="rounded-xl">
                    <SelectItem value="all">All Groups</SelectItem>
                    {muscleGroups.map((group) => (
                      <SelectItem key={group} value={group}>
                        {group}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              {/* Active filters indicator */}
              {(selectedDate || selectedWorkoutType !== "all" || selectedMuscleGroup !== "all" || searchTerm) && (
                <motion.div 
                  className="flex items-center gap-2"
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                >
                  <Badge variant="outline" className="gap-2 bg-accent/50">
                    <Filter size={14} />
                    Filters applied
                  </Badge>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={clearFilters}
                    className="text-muted-foreground hover:text-primary transition-colors"
                  >
                    Clear all
                  </Button>
                </motion.div>
              )}
            </div>
            
            {/* View Toggle */}
            <div className="flex justify-end mb-4">
              <Tabs 
                value={viewMode} 
                onValueChange={(value) => setViewMode(value as 'list' | 'grid')}
                className="w-[200px]"
              >
                <TabsList className="grid grid-cols-2 rounded-xl bg-muted/50">
                  <TabsTrigger value="list" className="rounded-lg">List</TabsTrigger>
                  <TabsTrigger value="grid" className="rounded-lg">Grid</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
            
            {/* Content */}
            {isLoading ? (
              <div className="space-y-4">
                {[...Array(5)].map((_, i) => (
                  <Skeleton key={i} className="h-16 w-full rounded-lg" />
                ))}
              </div>
            ) : error ? (
              <div className="text-center py-8">
                <p className="text-destructive">Error loading workouts: {error.message}</p>
                <Button 
                  variant="outline" 
                  onClick={() => queryClient.refetchQueries({ queryKey: ['workouts'] })} 
                  className="mt-4 rounded-xl"
                >
                  Retry
                </Button>
              </div>
            ) : filteredWorkouts.length === 0 ? (
              <motion.div 
                className="text-center py-12"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
              >
                <div className="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-primary/10 to-purple-600/10">
                  <Search className="h-8 w-8 text-primary" />
                </div>
                <h3 className="mt-4 text-lg font-medium">
                  {searchTerm || selectedDate || selectedWorkoutType !== "all" || selectedMuscleGroup !== "all"
                    ? "No workouts match your filters"
                    : "No workouts recorded yet"}
                </h3>
                <p className="mt-2 text-muted-foreground">
                  {searchTerm || selectedDate || selectedWorkoutType !== "all" || selectedMuscleGroup !== "all"
                    ? "Try adjusting your search or filters"
                    : "Get started by adding your first workout"}
                </p>
                <Button 
                  onClick={() => navigate('/gym-notes')} 
                  className="mt-4 rounded-xl bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90 transition-all"
                >
                  Add Workout
                </Button>
              </motion.div>
            ) : viewMode === 'list' ? (
              <ScrollArea className="h-[calc(100vh-400px)] rounded-xl">
                <div className="space-y-4 pr-4">
                  {Object.entries(groupedWorkouts).map(([header, workouts]) => (
                    <motion.div
                      key={header}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Collapsible
                        open={openCollapsibles[header] ?? false}
                        // onOpenChange={() => toggleCollapsible(header)}
                        className="rounded-xl border bg-gradient-to-br from-background to-muted/5 shadow-sm"
                      >
                        <CollapsibleTrigger asChild>
                          <div className="flex items-center justify-between p-4 hover:bg-accent/10 transition-colors cursor-pointer rounded-t-xl">
                            <div>
                              <h3 className="font-medium text-lg">{header.split(' - ')[0]}</h3>
                              <div className="flex gap-2 mt-1">
                                <Badge variant="secondary" className="bg-primary/10 text-primary">
                                  {header.split(' - ')[1]}
                                </Badge>
                                <Badge variant="outline" className="bg-secondary/10">
                                  {header.split(' - ')[2]}
                                </Badge>
                              </div>
                            </div>
                            <Button variant="ghost" size="sm" className="w-9 p-0 rounded-full">
                              {openCollapsibles[header] ? (
                                <ChevronUp className="h-4 w-4" />
                              ) : (
                                <ChevronDown className="h-4 w-4" />
                              )}
                              <span className="sr-only">Toggle</span>
                            </Button>
                          </div>
                        </CollapsibleTrigger>
                        
                        <CollapsibleContent className="CollapsibleContent">
                          <Table>
                            <TableHeader className="bg-muted/20">
                              <TableRow>
                                <TableHead className="w-[200px]">Exercise</TableHead>
                                <TableHead>Sets</TableHead>
                                <TableHead>Reps</TableHead>
                                <TableHead>Weight</TableHead>
                                <TableHead>Type</TableHead>
                                <TableHead>Extras</TableHead>
                                <TableHead>Intensity</TableHead>
                                <TableHead>Actions</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {workouts.map((workout) => (
                                <TableRow key={workout._id} className="hover:bg-muted/10">
                                  <TableCell className="font-medium">
                                    <div className="flex items-center gap-2">
                                      <div className="h-2 w-2 rounded-full bg-primary" />
                                      {workout.exercise_name}
                                    </div>
                                    {workout.notes && (
                                      <p className="text-sm text-muted-foreground mt-1">
                                        {workout.notes}
                                      </p>
                                    )}
                                  </TableCell>
                                  <TableCell>{workout.sets}</TableCell>
                                  <TableCell>{workout.reps}</TableCell>
                                  <TableCell>
                                    {workout.weight ? `${workout.weight} kg` : 'Bodyweight'}
                                  </TableCell>
                                  <TableCell>
                                    {workout.set_type || '-'}
                                  </TableCell>
                                  <TableCell>
                                    {workout.additional_exercises?.length ? (
                                      <div className="flex flex-wrap gap-1">
                                        {workout.additional_exercises.map((ex, i) => (
                                          <Badge key={i} variant="outline" className="text-xs bg-secondary/10">
                                            {ex}
                                          </Badge>
                                        ))}
                                      </div>
                                    ) : (
                                      '-'
                                    )}
                                  </TableCell>
                                  <TableCell>
                                    <Tooltip>
                                      <TooltipTrigger>
                                        <Progress 
                                          value={workout.intensity ? workout.intensity * 20 : 60} 
                                          className="h-2 w-16 bg-muted" 
                                          // indicatorClassName="bg-primary"
                                        />
                                      </TooltipTrigger>
                                      <TooltipContent>
                                        Intensity: {workout.intensity || 3}/5
                                      </TooltipContent>
                                    </Tooltip>
                                  </TableCell>
                                  <TableCell>
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      onClick={() => deleteMutation.mutate(workout._id)}
                                      disabled={deleteMutation.isPending}
                                      className="hover:bg-destructive/10 rounded-full"
                                    >
                                      <Trash2 className="h-4 w-4 text-destructive" />
                                    </Button>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </CollapsibleContent>
                      </Collapsible>
                    </motion.div>
                  ))}
                </div>
              </ScrollArea>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredWorkouts.map((workout) => (
                  <motion.div
                    key={workout._id}
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    whileHover={{ y: -5 }}
                  >
                    <Card className="h-full hover:shadow-lg transition-shadow">
                      <CardHeader className="pb-2">
                        <div className="flex justify-between items-start">
                          <div>
                            <CardTitle className="text-lg">{workout.exercise_name}</CardTitle>
                            <CardDescription className="text-sm">
                              {format(parseISO(workout.exercise_date), 'MMM d, yyyy')}
                            </CardDescription>
                          </div>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => deleteMutation.mutate(workout._id)}
                            disabled={deleteMutation.isPending}
                            className="h-8 w-8 rounded-full hover:bg-destructive/10"
                          >
                            <Trash2 className="h-3.5 w-3.5 text-destructive" />
                          </Button>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Sets</span>
                            <span className="font-medium">{workout.sets}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Reps</span>
                            <span className="font-medium">{workout.reps}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Weight</span>
                            <span className="font-medium">
                              {workout.weight ? `${workout.weight} kg` : 'Bodyweight'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-sm text-muted-foreground">Type</span>
                            <span className="font-medium">{workout.set_type || '-'}</span>
                          </div>
                          {workout.notes && (
                            <div className="pt-2 border-t">
                              <p className="text-sm text-muted-foreground">{workout.notes}</p>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
}