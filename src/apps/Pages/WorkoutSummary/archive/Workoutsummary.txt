import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { format, subDays } from 'date-fns';
import { useNavigate } from 'react-router-dom';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Icons } from '@/components/icons';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Workout {
  id: number;
  exercise_name: string;
  sets: number;
  reps: number;
  weight?: number;
  exercise_date: string;
  workout_type?: string;
  muscle_group?: string;
  set_type?: string;
  additional_exercises?: string[];
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

export default function WorkoutSummary() {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const { data: workouts = [], isLoading, error } = useQuery<Workout[], Error>({
    queryKey: ['workouts'],
    queryFn: async () => {
      if (!token) throw new Error('No authentication token found');
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/exercises`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      return response.data;
    },
    staleTime: 1000 * 60 * 5, // 5 minutes
  });

  // Process data for charts and recent workouts
  const processWorkoutData = () => {
    const last7Days = Array.from({ length: 7 }, (_, i) => {
      const date = subDays(new Date(), 6 - i);
      return format(date, 'yyyy-MM-dd');
    });

    const weeklyData = last7Days.map(date => {
      const dayWorkouts = workouts.filter(w => format(new Date(w.exercise_date), 'yyyy-MM-dd') === date);
      const totalVolume = dayWorkouts.reduce((sum, w) => sum + (w.sets * w.reps * (w.weight || 1)), 0);
      
      return {
        date: format(new Date(date), 'EEE'),
        volume: totalVolume,
        workouts: dayWorkouts.length
      };
    });

    const typeCount = workouts.reduce((acc: Record<string, number>, w) => {
      const type = w.workout_type || 'Unknown';
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});

    const typeData = Object.entries(typeCount).map(([name, value]) => ({
      name,
      value
    }));

    const muscleCount = workouts.reduce((acc: Record<string, number>, w) => {
      if (!w.muscle_group) return acc;
      acc[w.muscle_group] = (acc[w.muscle_group] || 0) + 1;
      return acc;
    }, {});

    const muscleData = Object.entries(muscleCount).map(([name, value]) => ({
      name,
      value
    }));

    const groupedByDate = workouts.reduce((acc: Record<string, Workout[]>, workout) => {
      const date = format(new Date(workout.exercise_date), 'yyyy-MM-dd');
      if (!acc[date]) acc[date] = [];
      acc[date].push(workout);
      return acc;
    }, {});

    const recentWorkouts = Object.entries(groupedByDate)
      .sort(([dateA], [dateB]) => new Date(dateB).getTime() - new Date(dateA).getTime())
      .slice(0, 5);

    return { weeklyData, typeData, muscleData, recentWorkouts };
  };

  const { weeklyData, typeData, muscleData, recentWorkouts } = processWorkoutData();

  if (error) {
    return (
      <div className="container px-4 py-6 mx-auto max-w-6xl">
        <div className="flex flex-col items-center justify-center space-y-4 min-h-[60vh] p-4">
          <Icons.warning className="h-12 w-12 text-red-500" />
          <h2 className="text-xl md:text-2xl font-bold text-center">Failed to load workout data</h2>
          <p className="text-muted-foreground text-center max-w-md">{error.message}</p>
          <div className="flex flex-col sm:flex-row gap-2 w-full max-w-xs">
            <Button onClick={() => navigate('/gym-notes')} className="w-full">
              <Icons.arrowLeft className="mr-2 h-4 w-4" />
              Back to Workouts
            </Button>
            <Button variant="outline" onClick={() => window.location.reload()} className="w-full">
              <Icons.refresh className="mr-2 h-4 w-4" />
              Try Again
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container px-4 py-6 mx-auto max-w-6xl">
      {/* Header Section */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-4 mb-6">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-primary">Workout Dashboard</h1>
          <p className="text-muted-foreground text-sm md:text-base">
            Track your fitness progress and workout history
          </p>
        </div>
        <Button 
          variant="outline" 
          onClick={() => navigate('/gym-notes')}
          className="w-full md:w-auto"
        >
          <Icons.plus className="mr-2 h-4 w-4" />
          Add Workout
        </Button>
      </div>

      {isLoading ? (
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-3 sm:grid-cols-4">
            {[...Array(4)].map((_, i) => (
              <Card key={i}>
                <CardHeader className="space-y-0 pb-2">
                  <Skeleton className="h-4 w-3/4" />
                </CardHeader>
                <CardContent>
                  <Skeleton className="h-6 w-full" />
                  <Skeleton className="h-4 w-full mt-1" />
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="grid grid-cols-1 gap-4 lg:grid-cols-2">
            {[...Array(2)].map((_, i) => (
              <Card key={i}>
                <CardHeader>
                  <Skeleton className="h-5 w-1/3" />
                </CardHeader>
                <CardContent>
                  <Skeleton className="h-60 w-full" />
                </CardContent>
              </Card>
            ))}
          </div>
          <Card>
            <CardHeader>
              <Skeleton className="h-5 w-1/4" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-40 w-full" />
            </CardContent>
          </Card>
        </div>
      ) : (
        <>
          {/* Stats Overview - Mobile First Design */}
          <ScrollArea className="w-full pb-2 mb-4 md:hidden">
            <div className="flex space-x-3 w-max">
              {[
                {
                  title: "Workouts",
                  value: workouts.length,
                  icon: <Icons.dumbbell  />,
                  desc: "Total"
                },
                {
                  title: "Volume",
                  value: workouts.reduce((sum, w) => sum + (w.sets * w.reps * (w.weight || 1)), 0).toLocaleString() + "kg",
                  icon: <Icons.weight className="h-4 w-4" />,
                  desc: "Lifted"
                },
                {
                  title: "Intensity",
                  value: Math.round(workouts.reduce((sum, w) => sum + (w.sets * w.reps), 0) / workouts.length) || 0,
                  icon: <Icons.activity className="h-4 w-4" />,
                  desc: "Avg reps"
                },
                {
                  title: "Favorite",
                  value: typeData[0]?.name || 'N/A',
                  icon: <Icons.star className="h-4 w-4" />,
                  desc: "Workout"
                }
              ].map((stat, i) => (
                <Card key={i} className="min-w-[140px]">
                  <CardHeader className="space-y-0 pb-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">{stat.title}</span>
                      <span className="text-muted-foreground">{stat.icon}</span>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="text-xl font-bold">{stat.value}</div>
                    <p className="text-xs text-muted-foreground">{stat.desc}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </ScrollArea>

          {/* Stats Overview - Desktop */}
          <div className="hidden md:grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <StatCard
              title="Total Workouts"
              value={workouts.length}
              icon={<Icons.dumbbell />}
              description="All time exercises"
            />
            <StatCard
              title="Total Volume"
              value={workouts.reduce((sum, w) => sum + (w.sets * w.reps * (w.weight || 1)), 0).toLocaleString() + " kg"}
              icon={<Icons.weight className="h-4 w-4" />}
              description="Total weight lifted"
            />
            <StatCard
              title="Avg. Intensity"
              value={Math.round(workouts.reduce((sum, w) => sum + (w.sets * w.reps), 0) / workouts.length) || 0}
              icon={<Icons.activity className="h-4 w-4" />}
              description="Avg. reps per workout"
            />
            <StatCard
              title="Favorite Type"
              value={typeData[0]?.name || 'N/A'}
              icon={<Icons.star className="h-4 w-4" />}
              description="Most frequent workout"
            />
          </div>

          {/* Charts Section */}
          <Tabs defaultValue="overview" className="mb-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="overview" className="text-xs sm:text-sm">
                Overview
              </TabsTrigger>
              <TabsTrigger value="progress" className="text-xs sm:text-sm">
                Progress
              </TabsTrigger>
              <TabsTrigger value="distribution" className="text-xs sm:text-sm">
                Distribution
              </TabsTrigger>
            </TabsList>
            <TabsContent value="overview" className="space-y-4 lg:space-y-0 lg:grid lg:grid-cols-2 lg:gap-6">
              <ChartCard title="Weekly Workout Volume">
                <div className="h-[250px] sm:h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={weeklyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="volume" name="Volume (kg)" fill="#8884d8" radius={[4, 4, 0, 0]} />
                      <Bar dataKey="workouts" name="Exercises" fill="#82ca9d" radius={[4, 4, 0, 0]} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </ChartCard>
              <ChartCard title="Workout Type Distribution">
                <div className="h-[250px] sm:h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={typeData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        nameKey="name"
                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      >
                        {typeData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </ChartCard>
            </TabsContent>
            <TabsContent value="progress">
              <ChartCard title="Strength Progress Over Time">
                <div className="h-[250px] sm:h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={weeklyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="volume" name="Volume (kg)" fill="#8884d8" radius={[4, 4, 0, 0]} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </ChartCard>
            </TabsContent>
            <TabsContent value="distribution">
              <ChartCard title="Muscle Group Focus">
                <div className="h-[250px] sm:h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      layout="vertical"
                      data={muscleData.sort((a, b) => b.value - a.value).slice(0, 8)}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" />
                      <YAxis dataKey="name" type="category" width={80} />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="value" name="Exercises" fill="#8884d8" radius={[0, 4, 4, 0]} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </ChartCard>
            </TabsContent>
          </Tabs>

          {/* Recent Workouts Accordion */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Recent Workout Sessions</CardTitle>
              <CardDescription>Your most recent workout days</CardDescription>
            </CardHeader>
            <CardContent className="p-0 sm:p-6">
              {recentWorkouts.length > 0 ? (
                <Accordion type="single" collapsible className="w-full">
                  {recentWorkouts.map(([date, exercises]) => {
                    const workoutDate = new Date(date);
                    const formattedDate = format(workoutDate, 'MMM d, yyyy');
                    const totalVolume = exercises.reduce(
                      (sum, ex) => sum + (ex.sets * ex.reps * (ex.weight || 1)),
                      0
                    ).toLocaleString();

                    return (
                      <AccordionItem key={date} value={date} className="border-b">
                        <AccordionTrigger className="hover:no-underline px-4 py-3">
                          <div className="flex items-center justify-between w-full pr-2">
                            <div className="flex items-center gap-3">
                              <div className="flex flex-col items-center bg-secondary rounded-lg p-2 min-w-[50px]">
                                <span className="text-xs font-medium">
                                  {format(workoutDate, 'EEE')}
                                </span>
                                <span className="text-lg font-bold">
                                  {format(workoutDate, 'd')}
                                </span>
                              </div>
                              <div className="text-left">
                                <h3 className="font-semibold text-sm sm:text-base">{formattedDate}</h3>
                                <div className="flex flex-wrap gap-1 mt-1">
                                  <Badge variant="secondary" className="text-xs">
                                    {exercises[0]?.workout_type || 'Mixed'}
                                  </Badge>
                                  {exercises[0]?.muscle_group && (
                                    <Badge variant="outline" className="text-xs">
                                      {exercises[0].muscle_group}
                                    </Badge>
                                  )}
                                </div>
                              </div>
                            </div>
                            <div className="flex items-center gap-2 sm:gap-4">
                              <div className="text-right hidden sm:block">
                                <p className="text-sm font-medium">{exercises.length} exercises</p>
                                <p className="text-xs text-muted-foreground">
                                  {totalVolume} kg
                                </p>
                              </div>
                              <Icons.chevronDown className="h-4 w-4 shrink-0" />
                            </div>
                          </div>
                        </AccordionTrigger>
                        <AccordionContent className="px-4 pb-4">
                          <div className="border rounded-lg overflow-hidden">
                            <Table>
                              <TableHeader className="bg-secondary">
                                <TableRow>
                                  <TableHead className="py-2">Exercise</TableHead>
                                  <TableHead className="py-2">Sets</TableHead>
                                  <TableHead className="py-2">Reps</TableHead>
                                  <TableHead className="py-2">Weight</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {exercises.map((exercise) => (
                                  <TableRow key={exercise.id} className="border-b">
                                    <TableCell className="py-3 font-medium">
                                      <div className="flex items-center gap-2">
                                        {exercise.exercise_name}
                                        {exercise.set_type && (
                                          <Badge variant="secondary" className="text-xs">
                                            {exercise.set_type}
                                          </Badge>
                                        )}
                                      </div>
                                    </TableCell>
                                    <TableCell className="py-3">{exercise.sets}</TableCell>
                                    <TableCell className="py-3">{exercise.reps}</TableCell>
                                    <TableCell className="py-3">
                                      {exercise.weight ? `${exercise.weight}kg` : '-'}
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </div>
                          <div className="mt-3 flex justify-between items-center">
                            <div className="text-sm text-muted-foreground">
                              Total volume: {totalVolume} kg
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => navigate(`/gym-notes?date=${date}`)}
                              className="text-primary"
                            >
                              <Icons.plus className="mr-2 h-4 w-4" />
                              Add to this day
                            </Button>
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    );
                  })}
                </Accordion>
              ) : (
                <div className="flex flex-col items-center justify-center py-8">
                  <Icons.dumbbell  />
                  <p className="text-muted-foreground text-center mb-4">
                    No workouts recorded yet. Start your fitness journey today!
                  </p>
                  <Button onClick={() => navigate('/gym-notes')} className="w-full max-w-xs">
                    Add Your First Workout
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>

          {/* All Exercises Table */}
          <Card>
            <CardHeader>
              <CardTitle>Exercise History</CardTitle>
              <CardDescription>Complete record of your workouts</CardDescription>
            </CardHeader>
            <CardContent>
              {workouts.length > 0 ? (
                <ScrollArea className="w-full rounded-md border" style={{ maxHeight: '500px' }}>
                  <Table>
                    <TableHeader className="sticky top-0 bg-background">
                      <TableRow>
                        <TableHead className="w-[100px]">Date</TableHead>
                        <TableHead>Exercise</TableHead>
                        <TableHead>Sets × Reps</TableHead>
                        <TableHead className="text-right">Volume</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {workouts
                        .sort((a, b) => new Date(b.exercise_date).getTime() - new Date(a.exercise_date).getTime())
                        .map((exercise) => (
                          <TableRow key={exercise.id} className="hover:bg-secondary/50">
                            <TableCell className="py-2">
                              {format(new Date(exercise.exercise_date), 'MMM d')}
                            </TableCell>
                            <TableCell className="py-2 font-medium">
                              <div className="flex flex-col">
                                <span>{exercise.exercise_name}</span>
                                <div className="flex gap-1 mt-1">
                                  {exercise.workout_type && (
                                    <Badge variant="secondary" className="text-xs">
                                      {exercise.workout_type}
                                    </Badge>
                                  )}
                                  {exercise.muscle_group && (
                                    <Badge variant="outline" className="text-xs">
                                      {exercise.muscle_group}
                                    </Badge>
                                  )}
                                </div>
                              </div>
                            </TableCell>
                            <TableCell className="py-2">
                              {exercise.sets} × {exercise.reps}
                            </TableCell>
                            <TableCell className="py-2 text-right">
                              {(exercise.sets * exercise.reps * (exercise.weight || 1)).toLocaleString()} kg
                            </TableCell>
                          </TableRow>
                        ))}
                    </TableBody>
                  </Table>
                </ScrollArea>
              ) : (
                <div className="flex flex-col items-center justify-center py-8">
                  <Icons.dumbbell  />
                  <p className="text-muted-foreground text-center mb-4">
                    No exercises recorded yet. Add your first workout in Gym Notes!
                  </p>
                  <Button onClick={() => navigate('/gym-notes')} className="w-full max-w-xs">
                    Add Workout
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
}

// Helper components
function StatCard({ title, value, icon, description }: {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  description: string;
}) {
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className="h-4 w-4 text-muted-foreground">{icon}</div>
      </CardHeader>
      <CardContent>
        <div className="text-xl font-bold">{value}</div>
        <p className="text-xs text-muted-foreground">{description}</p>
      </CardContent>
    </Card>
  );
}

function ChartCard({ title, children }: {
  title: string;
  children: React.ReactNode;
}) {
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle className="text-base">{title}</CardTitle>
      </CardHeader>
      <CardContent className="pt-0">
        {children}
      </CardContent>
    </Card>
  );
}