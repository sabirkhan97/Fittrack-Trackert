import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Collapse, Table, Button, Popconfirm, Spin, Typography, Empty, DatePicker } from 'antd';
import { DeleteOutlined, PlusOutlined } from '@ant-design/icons';
import { toast } from 'sonner';
import { format, isSameDay } from 'date-fns';
import { useState } from 'react';
import dayjs, { Dayjs } from 'dayjs';

const { Title, Text } = Typography;
const { Panel } = Collapse;

interface Workout {
  _id: string; // MongoDB ObjectId
  exercise_name: string;
  sets: number;
  reps: number;
  weight?: number;
  exercise_date: string;
  workout_type?: string;
  muscle_group?: string;
  set_type?: string;
  additional_exercises?: string[];
  notes?: string;
}

export default function WorkoutSummary() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const token = localStorage.getItem('token');
  const [selectedDate, setSelectedDate] = useState<Dayjs | null>(null);

  if (!token) {
    toast.error('Please login to view workouts');
    navigate('/login');
    return null;
  }

  const { data: workouts = [], isLoading, error } = useQuery<Workout[], Error>({
    queryKey: ['workouts', token],
    queryFn: async () => {
      try {
        const res = await axios.get('/api/exercises', {
          headers: { Authorization: `Bearer ${token}` },
        });
        return res.data.exercises.map((w: any) => ({
          _id: w._id,
          exercise_name: w.exercise_name,
          sets: w.sets,
          reps: w.reps,
          weight: w.weight,
          exercise_date: w.exercise_date,
          workout_type: w.workout_type,
          muscle_group: w.muscle_group,
          set_type: w.set_type,
          additional_exercises: w.additional_exercises || [],
          notes: w.notes,
        }));
      } catch (err: any) {
        if (err.response?.status === 401 || err.response?.status === 403) {
          localStorage.removeItem('token');
          navigate('/login');
          toast.error('Session expired. Please login again.');
        }
        throw err;
      }
    },
    retry: 1,
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      await axios.delete(`/api/exercises/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['workouts', token] });
      toast.success('Workout deleted');
    },
    onError: (err: any) => {
      toast.error('Failed to delete workout', {
        description: err.response?.data?.error || 'An error occurred',
      });
    },
  });

  const columns = [
    { title: 'Exercise', dataIndex: 'exercise_name', key: 'exercise_name' },
    { title: 'Sets', dataIndex: 'sets', key: 'sets' },
    { title: 'Reps', dataIndex: 'reps', key: 'reps' },
    {
      title: 'Weight (kg)',
      dataIndex: 'weight',
      key: 'weight',
      render: (w: number) => (w != null ? w : 'Bodyweight'),
    },
    {
      title: 'Set Type',
      dataIndex: 'set_type',
      key: 'set_type',
      render: (s: string) => s || '-',
    },
    {
      title: 'Additional Exercises',
      dataIndex: 'additional_exercises',
      key: 'additional_exercises',
      render: (ex: string[]) => (ex && ex.length > 0 ? ex.join(', ') : '-'),
    },
    {
      title: 'Notes',
      dataIndex: 'notes',
      key: 'notes',
      render: (n: string) => n || '-',
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_: any, record: Workout) => (
        <Popconfirm
          title="Delete this workout?"
          onConfirm={() => deleteMutation.mutate(record._id)}
        >
          <Button icon={<DeleteOutlined />} danger type="text" />
        </Popconfirm>
      ),
    },
  ];

  const filteredWorkouts = selectedDate
    ? workouts.filter((w) => isSameDay(new Date(w.exercise_date), selectedDate.toDate()))
    : workouts;

  const groupedWorkouts = filteredWorkouts.reduce((acc: Record<string, Workout[]>, workout) => {
    const date = format(new Date(workout.exercise_date), 'dd MMM yyyy');
    const key = `${date} - ${workout.workout_type || 'Unknown Type'} (${
      workout.muscle_group || 'Unknown Muscle'
    })`;
    acc[key] = acc[key] || [];
    acc[key].push(workout);
    return acc;
  }, {});

  const sortedHeaders = Object.keys(groupedWorkouts).sort((a, b) => {
    const dateA = new Date(a.split(' - ')[0]);
    const dateB = new Date(b.split(' - ')[0]);
    return dateB.getTime() - dateA.getTime();
  });

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 }}>
        <Title level={3}>My Workouts</Title>
        <Button icon={<PlusOutlined />} type="primary" onClick={() => navigate('/gym-notes')}>
          Add Workout
        </Button>
      </div>
      <div style={{ marginBottom: 24 }}>
        <DatePicker
          value={selectedDate}
          onChange={(date) => setSelectedDate(date)}
          allowClear
          style={{ width: 250 }}
          placeholder="Filter by date"
        />
      </div>
      {isLoading ? (
        <Spin size="large" />
      ) : error ? (
        <Text type="danger">{error.message}</Text>
      ) : filteredWorkouts.length === 0 ? (
        <Empty
          description={selectedDate ? 'No workouts on selected date' : 'No workouts yet'}
        >
          <Button type="primary" onClick={() => navigate('/gym-notes')}>
            Add First Workout
          </Button>
        </Empty>
      ) : (
        <Collapse accordion>
          {sortedHeaders.map((header) => (
            <Panel header={header} key={header}>
              <Table
                dataSource={groupedWorkouts[header]}
                columns={columns}
                rowKey="_id"
                pagination={false}
              />
            </Panel>
          ))}
        </Collapse>
      )}
    </div>
  );
}