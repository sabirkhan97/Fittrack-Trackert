{"version":3,"file":"Exercises-C5NIYsjs.js","sources":["../../src/apps/Pages/ExerciseSelector/ExerciseSelector.tsx","../../src/apps/Pages/ExerciseSelector/Exercises.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Icons } from '@/components/icons';\n// import { Label } from '@/components/ui/label';\nimport { Loader2, Search, X } from 'lucide-react';\nimport type { Exercise } from '@/apps/types/exercise';\nimport exerciseData from '../ExerciseSelector/data/exercise.json'\n\n\n// interface Exercise {\n//   id: string;\n//   name: string;\n//   muscleGroup: string;\n//   category: string;\n//   equipment: string;\n//   difficulty: string;\n// }\n\ninterface ExerciseSelectorProps {\n  onSelect: (exercise: Exercise) => void;\n  selectedExercises?: Exercise[];\n}\n\nexport default function ExerciseSelector({ onSelect, selectedExercises = [] }: ExerciseSelectorProps) {\n  const [exercises, setExercises] = useState<Exercise[]>([]);\n  const [filteredExercises, setFilteredExercises] = useState<Exercise[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedMuscleGroup, setSelectedMuscleGroup] = useState<string>('');\n  const [selectedEquipment, setSelectedEquipment] = useState<string>('');\n  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Extract unique filter options\n  const muscleGroups = [...new Set(exercises.map(ex => ex.muscleGroup))].sort();\n  const equipmentTypes = [...new Set(exercises.map(ex => ex.equipment))].sort();\n  const difficultyLevels = [...new Set(exercises.map(ex => ex.difficulty))].sort();\n\n  // Fetch exercises on mount\n  useEffect(() => {\n    const fetchExercises = async () => {\n      try {\n        const formattedExercises: Exercise[] = exerciseData.exercises.map((ex: any) => ({\n          id: ex.id,\n          name: ex.name,\n          muscleGroup: ex.muscle_group,\n          category: ex.muscle_group,\n          equipment: ex.equipment,\n          difficulty: ex.difficulty,\n        }));\n\n        setExercises(formattedExercises);\n        setFilteredExercises(formattedExercises);\n      } catch (err) {\n        console.error('Error loading exercises:', err);\n        setError('Failed to load exercises. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchExercises();\n  }, []);\n\n\n  // Apply filters when any filter changes\n  useEffect(() => {\n    let results = exercises;\n\n    // Apply search filter\n    if (searchTerm) {\n      results = results.filter(ex =>\n        (ex.name?.toLowerCase().includes(searchTerm.toLowerCase()) || \n        ex.muscleGroup?.toLowerCase().includes(searchTerm.toLowerCase()))\n       \n      );\n    }\n\n    // Apply muscle group filter\n    if (selectedMuscleGroup) {\n      results = results.filter(ex => ex.muscleGroup === selectedMuscleGroup);\n    }\n\n    // Apply equipment filter\n    if (selectedEquipment) {\n      results = results.filter(ex => ex.equipment === selectedEquipment);\n    }\n\n    // Apply difficulty filter\n    if (selectedDifficulty) {\n      results = results.filter(ex => ex.difficulty === selectedDifficulty);\n    }\n\n    setFilteredExercises(results);\n  }, [searchTerm, selectedMuscleGroup, selectedEquipment, selectedDifficulty, exercises]);\n\n  const resetFilters = () => {\n    setSearchTerm('');\n    setSelectedMuscleGroup('');\n    setSelectedEquipment('');\n    setSelectedDifficulty('');\n  };\n\n  const isExerciseSelected = (exerciseId: string) => {\n    return selectedExercises.some(ex => ex.id === exerciseId);\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl flex items-center gap-2\">\n          <Icons.dumbbell />\n          Exercise Selector\n        </CardTitle>\n        <CardDescription>\n          Browse and select exercises to add to your workout\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Search and Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative md:col-span-2\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search exercises...\"\n              className=\"pl-9\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n\n          <Select value={selectedMuscleGroup || 'all'} onValueChange={val => setSelectedMuscleGroup(val === 'all' ? '' : val)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Muscle Group\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Muscle Groups</SelectItem>\n              {muscleGroups.map(group => (\n                <SelectItem key={group} value={group}>{group}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n\n\n          <Select value={selectedEquipment || 'all'} onValueChange={val => setSelectedEquipment(val === 'all' ? '' : val)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Equipment\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Equipment</SelectItem>\n              {equipmentTypes.map(equip => (\n                <SelectItem key={equip} value={equip}>{equip}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Select value={selectedDifficulty || 'all'} onValueChange={val => setSelectedDifficulty(val === 'all' ? '' : val)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Difficulty\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Levels</SelectItem>\n              {difficultyLevels.map(level => (\n                <SelectItem key={level} value={level}>{level}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n\n          <Button\n            variant=\"outline\"\n            onClick={resetFilters}\n            className=\"flex items-center gap-2\"\n          >\n            <X className=\"h-4 w-4\" />\n            Clear Filters\n          </Button>\n\n          <div className=\"text-sm text-muted-foreground flex items-center justify-end\">\n            {filteredExercises.length} exercises found\n          </div>\n        </div>\n\n        {/* Loading and Error States */}\n        {isLoading && (\n          <div className=\"flex justify-center items-center h-40\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        )}\n\n        {error && (\n          <div className=\"text-destructive p-4 border rounded-lg bg-destructive/10 flex items-center gap-2\">\n            <Icons.warning className=\"h-5 w-5\" />\n            {error}\n          </div>\n        )}\n\n        {/* Exercise Grid */}\n        {!isLoading && !error && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\n            {filteredExercises.map((exercise) => (\n              <ExerciseCard\n                key={exercise.id}\n                exercise={exercise}\n                onClick={() => onSelect(exercise)}\n                isSelected={isExerciseSelected(exercise.id)}\n              />\n            ))}\n\n            {filteredExercises.length === 0 && (\n              <div className=\"col-span-full text-center py-8\">\n                <Icons.Search className=\"mx-auto h-8 w-8 text-muted-foreground mb-2\" />\n                <h3 className=\"text-lg font-medium\">No exercises found</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Try adjusting your search or filters\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface ExerciseCardProps {\n  exercise: Exercise;\n  onClick: () => void;\n  isSelected: boolean;\n}\n\nfunction ExerciseCard({ exercise, onClick, isSelected }: ExerciseCardProps) {\n  return (\n    <div\n      className={`border rounded-lg p-4 transition-all cursor-pointer hover:shadow-md ${isSelected\n        ? 'border-primary bg-primary/5'\n        : 'hover:border-primary bg-card'\n        }`}\n      onClick={onClick}\n    >\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex items-center gap-2\">\n          <Icons.dumbbell />\n          <h4 className=\"font-medium\">{exercise.name}</h4>\n        </div>\n        <Badge variant={isSelected ? 'default' : 'outline'}>\n          {isSelected ? 'Selected' : exercise.difficulty}\n        </Badge>\n      </div>\n\n      <div className=\"mt-3 space-y-1 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Icons.muscle className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground\">{exercise.muscleGroup}</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Icons.equipment className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground\">{exercise.equipment}</span>\n        </div>\n      </div>\n\n      <Button\n        variant={isSelected ? 'default' : 'outline'}\n        size=\"sm\"\n        className=\"mt-4 w-full\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onClick();\n        }}\n      >\n        {isSelected ? (\n          <>\n            <Icons.check className=\"mr-2 h-4 w-4\" />\n            Selected\n          </>\n        ) : (\n          'Select Exercise'\n        )}\n      </Button>\n    </div>\n  );\n}","import { useNavigate } from 'react-router-dom';\nimport  ExerciseSelector  from './ExerciseSelector';\n\nimport type { Exercise } from '@/apps/types/exercise';\n\n\n// interface Exercise {\n//   name: string;\n//   muscle_group: string;\n// }\n\nexport function Exercises() {\n  const navigate = useNavigate();\n\n  const handleSelectExercise = (exercise: Exercise) => {\n    navigate('/gym-notes', { state: { selectedExercise: exercise } });\n  };\n  \n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <ExerciseSelector onSelect={handleSelectExercise} />\n    </div>\n  );\n}\n\nexport default Exercises"],"names":["ExerciseSelector","onSelect","selectedExercises","exercises","setExercises","useState","filteredExercises","setFilteredExercises","searchTerm","setSearchTerm","selectedMuscleGroup","setSelectedMuscleGroup","selectedEquipment","setSelectedEquipment","selectedDifficulty","setSelectedDifficulty","isLoading","setIsLoading","error","setError","muscleGroups","ex","equipmentTypes","difficultyLevels","useEffect","formattedExercises","exerciseData","err","results","_a","_b","resetFilters","isExerciseSelected","exerciseId","jsxs","Card","CardHeader","CardTitle","jsx","Icons","CardDescription","CardContent","Search","Input","e","Select","val","SelectTrigger","SelectValue","SelectContent","SelectItem","group","equip","level","Button","X","Loader2","exercise","ExerciseCard","onClick","isSelected","Badge","Fragment","Exercises","navigate","useNavigate","handleSelectExercise"],"mappings":"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"}